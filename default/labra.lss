
labra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  0000166a  000016fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000166a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001c8  008001c8  000017c6  2**0
                  ALLOC
  3 .stab         00000b34  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000026f  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000078  00000000  00000000  0000256b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000181  00000000  00000000  000025e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001227  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000556  00000000  00000000  0000398b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001173  00000000  00000000  00003ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00005054  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000321  00000000  00000000  00005254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fe0  00000000  00000000  00005575  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000082  00000000  00000000  00006555  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000100  00000000  00000000  000065d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_26>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e6       	ldi	r30, 0x6A	; 106
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3c       	cpi	r26, 0xC8	; 200
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a8 ec       	ldi	r26, 0xC8	; 200
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3c       	cpi	r26, 0xC9	; 201
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 53 08 	call	0x10a6	; 0x10a6 <main>
      c6:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <timer>:
void introduction(void);


// A timer in seconds
void timer(void){
	seconds++;
      ce:	80 91 c8 01 	lds	r24, 0x01C8
      d2:	8f 5f       	subi	r24, 0xFF	; 255
      d4:	80 93 c8 01 	sts	0x01C8, r24
}
      d8:	08 95       	ret

000000da <generatecode>:

// Funktio generoi s numeron sarjan
int generatecode(char* code, int s)
{
      da:	cf 92       	push	r12
      dc:	df 92       	push	r13
      de:	ef 92       	push	r14
      e0:	ff 92       	push	r15
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	8c 01       	movw	r16, r24
      ec:	7b 01       	movw	r14, r22
	// Merkitään taulukon loppumerkki
	code[s] = '\0';
      ee:	fc 01       	movw	r30, r24
      f0:	e6 0f       	add	r30, r22
      f2:	f7 1f       	adc	r31, r23
      f4:	10 82       	st	Z, r1

	// Määritellään siemenluku ajastimelta
	int seed = TCNT1;
      f6:	8c b5       	in	r24, 0x2c	; 44
      f8:	9d b5       	in	r25, 0x2d	; 45

	// Alustetaan random generaattori
	srand(seed);
      fa:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <srand>

	// Määritellään neljänumeroinen koodi
	for (int i=0; i < s; i++)
      fe:	1e 14       	cp	r1, r14
     100:	1f 04       	cpc	r1, r15
     102:	a4 f4       	brge	.+40     	; 0x12c <generatecode+0x52>
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
	{
		code[i] = '0' + (rand() % 6 + 1);
     108:	0f 2e       	mov	r0, r31
     10a:	f6 e0       	ldi	r31, 0x06	; 6
     10c:	cf 2e       	mov	r12, r31
     10e:	dd 24       	eor	r13, r13
     110:	f0 2d       	mov	r31, r0
     112:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <rand>
     116:	b6 01       	movw	r22, r12
     118:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     11c:	8f 5c       	subi	r24, 0xCF	; 207
     11e:	f8 01       	movw	r30, r16
     120:	81 93       	st	Z+, r24
     122:	8f 01       	movw	r16, r30

	// Alustetaan random generaattori
	srand(seed);

	// Määritellään neljänumeroinen koodi
	for (int i=0; i < s; i++)
     124:	21 96       	adiw	r28, 0x01	; 1
     126:	ce 15       	cp	r28, r14
     128:	df 05       	cpc	r29, r15
     12a:	9c f3       	brlt	.-26     	; 0x112 <generatecode+0x38>
	{
		code[i] = '0' + (rand() % 6 + 1);
	}

	return 0;
}
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	cf 90       	pop	r12
     140:	08 95       	ret

00000142 <print_history>:

// Tulostaa history-taulun määritellyn kierroksen
// TAULUN RAKENNE: ARVAUS+OIKEAT+VÄÄRÄT
void print_history(char *history, int kierros, int code_size)
{
     142:	af 92       	push	r10
     144:	bf 92       	push	r11
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	5c 01       	movw	r10, r24
     158:	6b 01       	movw	r12, r22
     15a:	7a 01       	movw	r14, r20
		// Tulostetaan historia-taulun arvaus
		for(int i=0; i < (code_size); i++)
     15c:	14 16       	cp	r1, r20
     15e:	15 06       	cpc	r1, r21
     160:	c4 f4       	brge	.+48     	; 0x192 <print_history+0x50>
		{
			lcd_write_data(history[i+(kierros*(code_size+2))]);
     162:	ca 01       	movw	r24, r20
     164:	02 96       	adiw	r24, 0x02	; 2
     166:	86 9f       	mul	r24, r22
     168:	e0 01       	movw	r28, r0
     16a:	87 9f       	mul	r24, r23
     16c:	d0 0d       	add	r29, r0
     16e:	96 9f       	mul	r25, r22
     170:	d0 0d       	add	r29, r0
     172:	11 24       	eor	r1, r1
	return 0;
}

// Tulostaa history-taulun määritellyn kierroksen
// TAULUN RAKENNE: ARVAUS+OIKEAT+VÄÄRÄT
void print_history(char *history, int kierros, int code_size)
     174:	ca 0d       	add	r28, r10
     176:	db 1d       	adc	r29, r11
{
		// Tulostetaan historia-taulun arvaus
		for(int i=0; i < (code_size); i++)
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_write_data(history[i+(kierros*(code_size+2))]);
     17c:	89 91       	ld	r24, Y+
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	61 e0       	ldi	r22, 0x01	; 1
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
// Tulostaa history-taulun määritellyn kierroksen
// TAULUN RAKENNE: ARVAUS+OIKEAT+VÄÄRÄT
void print_history(char *history, int kierros, int code_size)
{
		// Tulostetaan historia-taulun arvaus
		for(int i=0; i < (code_size); i++)
     188:	0f 5f       	subi	r16, 0xFF	; 255
     18a:	1f 4f       	sbci	r17, 0xFF	; 255
     18c:	0e 15       	cp	r16, r14
     18e:	1f 05       	cpc	r17, r15
     190:	ac f3       	brlt	.-22     	; 0x17c <print_history+0x3a>
		{
			lcd_write_data(history[i+(kierros*(code_size+2))]);
		}

		// Tulostetaan väli coden jälkeen
		lcd_write_data(' ');
     192:	80 e2       	ldi	r24, 0x20	; 32
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

		// Tulostetaan oikealla paikalla olevat numerot
		for(int i=code_size; i < (code_size+1); i++)
     19e:	e7 01       	movw	r28, r14
     1a0:	21 96       	adiw	r28, 0x01	; 1
     1a2:	ec 16       	cp	r14, r28
     1a4:	fd 06       	cpc	r15, r29
     1a6:	ec f0       	brlt	.+58     	; 0x1e2 <print_history+0xa0>
		{
			lcd_write_data(history[i+(kierros*(code_size+2))]);
		}

		// Tulostetaan väli
		lcd_write_data(' ');
     1a8:	80 e2       	ldi	r24, 0x20	; 32
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

		// Tulostetaan väärällä paikalla olevat numerot
		for(int i=(code_size+1); i < (code_size+2); i++)
     1b4:	c7 01       	movw	r24, r14
     1b6:	02 96       	adiw	r24, 0x02	; 2
     1b8:	c8 17       	cp	r28, r24
     1ba:	d9 07       	cpc	r29, r25
     1bc:	44 f5       	brge	.+80     	; 0x20e <print_history+0xcc>
		{
			lcd_write_data(history[i+(kierros*(code_size+2))]);
     1be:	8c 9d       	mul	r24, r12
     1c0:	90 01       	movw	r18, r0
     1c2:	8d 9d       	mul	r24, r13
     1c4:	30 0d       	add	r19, r0
     1c6:	9c 9d       	mul	r25, r12
     1c8:	30 0d       	add	r19, r0
     1ca:	11 24       	eor	r1, r1
     1cc:	ca 0d       	add	r28, r10
     1ce:	db 1d       	adc	r29, r11
     1d0:	c2 0f       	add	r28, r18
     1d2:	d3 1f       	adc	r29, r19
     1d4:	88 81       	ld	r24, Y
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     1e0:	16 c0       	rjmp	.+44     	; 0x20e <print_history+0xcc>
		lcd_write_data(' ');

		// Tulostetaan oikealla paikalla olevat numerot
		for(int i=code_size; i < (code_size+1); i++)
		{
			lcd_write_data(history[i+(kierros*(code_size+2))]);
     1e2:	97 01       	movw	r18, r14
     1e4:	2e 5f       	subi	r18, 0xFE	; 254
     1e6:	3f 4f       	sbci	r19, 0xFF	; 255
     1e8:	2c 9d       	mul	r18, r12
     1ea:	c0 01       	movw	r24, r0
     1ec:	2d 9d       	mul	r18, r13
     1ee:	90 0d       	add	r25, r0
     1f0:	3c 9d       	mul	r19, r12
     1f2:	90 0d       	add	r25, r0
     1f4:	11 24       	eor	r1, r1
     1f6:	f5 01       	movw	r30, r10
     1f8:	ee 0d       	add	r30, r14
     1fa:	ff 1d       	adc	r31, r15
     1fc:	e8 0f       	add	r30, r24
     1fe:	f9 1f       	adc	r31, r25
     200:	80 81       	ld	r24, Z
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     20c:	cd cf       	rjmp	.-102    	; 0x1a8 <print_history+0x66>
		// Tulostetaan väärällä paikalla olevat numerot
		for(int i=(code_size+1); i < (code_size+2); i++)
		{
			lcd_write_data(history[i+(kierros*(code_size+2))]);
		}	
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	ff 90       	pop	r15
     218:	ef 90       	pop	r14
     21a:	df 90       	pop	r13
     21c:	cf 90       	pop	r12
     21e:	bf 90       	pop	r11
     220:	af 90       	pop	r10
     222:	08 95       	ret

00000224 <set_cursor_location>:


/* Set cursor location */
void set_cursor_location(unsigned char x, unsigned char y)
{
	if (y==0) lcd_write_ctrl(LCD_DDRAM | (0x00+x));
     224:	66 23       	and	r22, r22
     226:	39 f4       	brne	.+14     	; 0x236 <set_cursor_location+0x12>
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	80 68       	ori	r24, 0x80	; 128
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     234:	08 95       	ret
	else lcd_write_ctrl(LCD_DDRAM | (0x40+x));
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	80 5c       	subi	r24, 0xC0	; 192
     23a:	9f 4f       	sbci	r25, 0xFF	; 255
     23c:	80 68       	ori	r24, 0x80	; 128
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     246:	08 95       	ret

00000248 <check_guess>:

// Funktio tarkistaa merkit oikealla paikalla ja väärillä paikoilla
// ja lisää historiariveille tiedon tästä
// Jos arvaus on oikeain, palautetaan arvo 1. Muutoin palautetaan arvo 0.
int check_guess(char *code, char *guess, int code_size, char *history, int *ptr)
{
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	5f 92       	push	r5
     24e:	6f 92       	push	r6
     250:	7f 92       	push	r7
     252:	8f 92       	push	r8
     254:	9f 92       	push	r9
     256:	af 92       	push	r10
     258:	bf 92       	push	r11
     25a:	cf 92       	push	r12
     25c:	df 92       	push	r13
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	df 93       	push	r29
     268:	cf 93       	push	r28
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	60 97       	sbiw	r28, 0x10	; 16
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	7a 01       	movw	r14, r20
     27c:	3e 83       	std	Y+6, r19	; 0x06
     27e:	2d 83       	std	Y+5, r18	; 0x05
     280:	1a 87       	std	Y+10, r17	; 0x0a
     282:	09 87       	std	Y+9, r16	; 0x09

		// Funktio palauttaa arvon 1, mikäli ratkaisu on oikein
		if(right_place==code_size) return(1);
		// Muuten palautetaan arvo 0
		else return(0);
}
     284:	2d b7       	in	r18, 0x3d	; 61
     286:	3e b7       	in	r19, 0x3e	; 62
     288:	3e 87       	std	Y+14, r19	; 0x0e
     28a:	2d 87       	std	Y+13, r18	; 0x0d
int check_guess(char *code, char *guess, int code_size, char *history, int *ptr)
{
		int right_place=0;
		int wp=0;

		int kierros = *ptr;
     28c:	f8 01       	movw	r30, r16
     28e:	01 90       	ld	r0, Z+
     290:	f0 81       	ld	r31, Z
     292:	e0 2d       	mov	r30, r0
     294:	f8 87       	std	Y+8, r31	; 0x08
     296:	ef 83       	std	Y+7, r30	; 0x07

		// Määritellään väliaikaistaulu, jota väärällä paikalla olevien numeroiden määrittäiseen
		char code_temp[code_size+1];
     298:	9a 01       	movw	r18, r20
     29a:	2f 5f       	subi	r18, 0xFF	; 255
     29c:	3f 4f       	sbci	r19, 0xFF	; 255
     29e:	4d b7       	in	r20, 0x3d	; 61
     2a0:	5e b7       	in	r21, 0x3e	; 62
     2a2:	42 1b       	sub	r20, r18
     2a4:	53 0b       	sbc	r21, r19
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	5e bf       	out	0x3e, r21	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	4d bf       	out	0x3d, r20	; 61
     2b0:	2d b7       	in	r18, 0x3d	; 61
     2b2:	3e b7       	in	r19, 0x3e	; 62
     2b4:	2f 5f       	subi	r18, 0xFF	; 255
     2b6:	3f 4f       	sbci	r19, 0xFF	; 255
     2b8:	3c 87       	std	Y+12, r19	; 0x0c
     2ba:	2b 87       	std	Y+11, r18	; 0x0b
		for(int i=0; i < code_size; i++)
     2bc:	1e 14       	cp	r1, r14
     2be:	1f 04       	cpc	r1, r15
     2c0:	0c f0       	brlt	.+2      	; 0x2c4 <check_guess+0x7c>
     2c2:	da c0       	rjmp	.+436    	; 0x478 <check_guess+0x230>
     2c4:	58 2f       	mov	r21, r24
     2c6:	49 2f       	mov	r20, r25
     2c8:	c8 2e       	mov	r12, r24
     2ca:	d9 2e       	mov	r13, r25
     2cc:	52 2e       	mov	r5, r18
     2ce:	33 2e       	mov	r3, r19
     2d0:	a2 2f       	mov	r26, r18
     2d2:	b3 2f       	mov	r27, r19
     2d4:	e5 2f       	mov	r30, r21
     2d6:	f4 2f       	mov	r31, r20
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
		{
			code_temp[i]=code[i];
     2dc:	21 91       	ld	r18, Z+
     2de:	2d 93       	st	X+, r18

		int kierros = *ptr;

		// Määritellään väliaikaistaulu, jota väärällä paikalla olevien numeroiden määrittäiseen
		char code_temp[code_size+1];
		for(int i=0; i < code_size; i++)
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	8e 15       	cp	r24, r14
     2e4:	9f 05       	cpc	r25, r15
     2e6:	d1 f7       	brne	.-12     	; 0x2dc <check_guess+0x94>
}

// Funktio tarkistaa merkit oikealla paikalla ja väärillä paikoilla
// ja lisää historiariveille tiedon tästä
// Jos arvaus on oikeain, palautetaan arvo 1. Muutoin palautetaan arvo 0.
int check_guess(char *code, char *guess, int code_size, char *history, int *ptr)
     2e8:	4b 01       	movw	r8, r22
     2ea:	8e 0c       	add	r8, r14
     2ec:	9f 1c       	adc	r9, r15
     2ee:	45 2d       	mov	r20, r5
     2f0:	53 2d       	mov	r21, r3
     2f2:	86 01       	movw	r16, r12
     2f4:	9b 01       	movw	r18, r22
     2f6:	1c 82       	std	Y+4, r1	; 0x04
     2f8:	1b 82       	std	Y+3, r1	; 0x03
     2fa:	1a 82       	std	Y+2, r1	; 0x02
     2fc:	19 82       	std	Y+1, r1	; 0x01
		}

		/* Verrataan montako on oikealla paikalla ja montako väärällä */
		for (int i=0; i < code_size; i++)
		{
			if (guess[i]==code[i])
     2fe:	66 24       	eor	r6, r6
     300:	77 24       	eor	r7, r7
				{
					if((guess[i]==code_temp[k]) && (guess[k]!=code_temp[k]))
					{
						wp++;
						// Jos numero löytyy, poistetaan väliaikaistaulusta
						code_temp[k]='0';
     302:	0f 2e       	mov	r0, r31
     304:	f0 e3       	ldi	r31, 0x30	; 48
     306:	2f 2e       	mov	r2, r31
     308:	f0 2d       	mov	r31, r0
     30a:	78 8b       	std	Y+16, r23	; 0x10
     30c:	6f 87       	std	Y+15, r22	; 0x0f
		}

		/* Verrataan montako on oikealla paikalla ja montako väärällä */
		for (int i=0; i < code_size; i++)
		{
			if (guess[i]==code[i])
     30e:	f9 01       	movw	r30, r18
     310:	a1 90       	ld	r10, Z+
     312:	9f 01       	movw	r18, r30
     314:	f8 01       	movw	r30, r16
     316:	81 91       	ld	r24, Z+
     318:	8f 01       	movw	r16, r30
     31a:	a8 16       	cp	r10, r24
     31c:	41 f4       	brne	.+16     	; 0x32e <check_guess+0xe6>
			{
			 	right_place++;
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
				// Jos numero löytyy, poistetaan väliaikaistaulusta
				code_temp[i]='0';
     328:	fa 01       	movw	r30, r20
     32a:	20 82       	st	Z, r2
     32c:	1c c0       	rjmp	.+56     	; 0x366 <check_guess+0x11e>
		}

		/* Verrataan montako on oikealla paikalla ja montako väärällä */
		for (int i=0; i < code_size; i++)
		{
			if (guess[i]==code[i])
     32e:	e5 2d       	mov	r30, r5
     330:	f3 2d       	mov	r31, r3
     332:	c3 01       	movw	r24, r6

			else
			{
				for (int k=0; k < code_size; k++)
				{
					if((guess[i]==code_temp[k]) && (guess[k]!=code_temp[k]))
     334:	a1 91       	ld	r26, Z+
     336:	aa 16       	cp	r10, r26
     338:	91 f4       	brne	.+36     	; 0x35e <check_guess+0x116>
}

// Funktio tarkistaa merkit oikealla paikalla ja väärillä paikoilla
// ja lisää historiariveille tiedon tästä
// Jos arvaus on oikeain, palautetaan arvo 1. Muutoin palautetaan arvo 0.
int check_guess(char *code, char *guess, int code_size, char *history, int *ptr)
     33a:	db 01       	movw	r26, r22
     33c:	a8 0f       	add	r26, r24
     33e:	b9 1f       	adc	r27, r25

			else
			{
				for (int k=0; k < code_size; k++)
				{
					if((guess[i]==code_temp[k]) && (guess[k]!=code_temp[k]))
     340:	ac 91       	ld	r26, X
     342:	aa 16       	cp	r10, r26
     344:	61 f0       	breq	.+24     	; 0x35e <check_guess+0x116>
					{
						wp++;
     346:	eb 81       	ldd	r30, Y+3	; 0x03
     348:	fc 81       	ldd	r31, Y+4	; 0x04
     34a:	31 96       	adiw	r30, 0x01	; 1
     34c:	fc 83       	std	Y+4, r31	; 0x04
     34e:	eb 83       	std	Y+3, r30	; 0x03
						// Jos numero löytyy, poistetaan väliaikaistaulusta
						code_temp[k]='0';
     350:	eb 85       	ldd	r30, Y+11	; 0x0b
     352:	fc 85       	ldd	r31, Y+12	; 0x0c
     354:	8e 0f       	add	r24, r30
     356:	9f 1f       	adc	r25, r31
     358:	fc 01       	movw	r30, r24
     35a:	20 82       	st	Z, r2
						// Rikotaan looppi numeron löydyttyä duplikaattien välttämiseksi
						break;
     35c:	04 c0       	rjmp	.+8      	; 0x366 <check_guess+0x11e>
				code_temp[i]='0';
			}

			else
			{
				for (int k=0; k < code_size; k++)
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	8e 15       	cp	r24, r14
     362:	9f 05       	cpc	r25, r15
     364:	3c f3       	brlt	.-50     	; 0x334 <check_guess+0xec>
     366:	4f 5f       	subi	r20, 0xFF	; 255
     368:	5f 4f       	sbci	r21, 0xFF	; 255
		{
			code_temp[i]=code[i];
		}

		/* Verrataan montako on oikealla paikalla ja montako väärällä */
		for (int i=0; i < code_size; i++)
     36a:	28 15       	cp	r18, r8
     36c:	39 05       	cpc	r19, r9
     36e:	79 f6       	brne	.-98     	; 0x30e <check_guess+0xc6>
     370:	af 84       	ldd	r10, Y+15	; 0x0f
     372:	b8 88       	ldd	r11, Y+16	; 0x10
			}
		
		}


		set_cursor_location(10,1);
     374:	8a e0       	ldi	r24, 0x0A	; 10
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
		for(int i=0; i < code_size; i++)
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_write_data(code[i]);
     380:	f6 01       	movw	r30, r12
     382:	81 91       	ld	r24, Z+
     384:	6f 01       	movw	r12, r30
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		
		}


		set_cursor_location(10,1);
		for(int i=0; i < code_size; i++)
     390:	0f 5f       	subi	r16, 0xFF	; 255
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	0e 15       	cp	r16, r14
     396:	1f 05       	cpc	r17, r15
     398:	9c f3       	brlt	.-26     	; 0x380 <check_guess+0x138>
		}

		// Tallennetaan tiedot arvauksesta history-tauluun
		for(int i=0; i < code_size; i++)
		{
			history[i+(kierros*(code_size+2))]=guess[i];
     39a:	c7 01       	movw	r24, r14
     39c:	02 96       	adiw	r24, 0x02	; 2
     39e:	2f 81       	ldd	r18, Y+7	; 0x07
     3a0:	38 85       	ldd	r19, Y+8	; 0x08
     3a2:	28 9f       	mul	r18, r24
     3a4:	f0 01       	movw	r30, r0
     3a6:	29 9f       	mul	r18, r25
     3a8:	f0 0d       	add	r31, r0
     3aa:	38 9f       	mul	r19, r24
     3ac:	f0 0d       	add	r31, r0
     3ae:	11 24       	eor	r1, r1
}

// Funktio tarkistaa merkit oikealla paikalla ja väärillä paikoilla
// ja lisää historiariveille tiedon tästä
// Jos arvaus on oikeain, palautetaan arvo 1. Muutoin palautetaan arvo 0.
int check_guess(char *code, char *guess, int code_size, char *history, int *ptr)
     3b0:	4d 81       	ldd	r20, Y+5	; 0x05
     3b2:	5e 81       	ldd	r21, Y+6	; 0x06
     3b4:	e4 0f       	add	r30, r20
     3b6:	f5 1f       	adc	r31, r21
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	d5 01       	movw	r26, r10
		}

		// Tallennetaan tiedot arvauksesta history-tauluun
		for(int i=0; i < code_size; i++)
		{
			history[i+(kierros*(code_size+2))]=guess[i];
     3be:	2d 91       	ld	r18, X+
     3c0:	21 93       	st	Z+, r18
		{
			lcd_write_data(code[i]);
		}

		// Tallennetaan tiedot arvauksesta history-tauluun
		for(int i=0; i < code_size; i++)
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	8e 15       	cp	r24, r14
     3c6:	9f 05       	cpc	r25, r15
     3c8:	d1 f7       	brne	.-12     	; 0x3be <check_guess+0x176>
		{
			history[i+(kierros*(code_size+2))]=guess[i];
		}		
		for(int i=code_size; i < (code_size+2); i++)
     3ca:	97 01       	movw	r18, r14
     3cc:	2e 5f       	subi	r18, 0xFE	; 254
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	e2 16       	cp	r14, r18
     3d2:	f3 06       	cpc	r15, r19
     3d4:	ac f4       	brge	.+42     	; 0x400 <check_guess+0x1b8>
		{
			history[code_size+(kierros*(code_size+2))]='0'+right_place;
     3d6:	ef 81       	ldd	r30, Y+7	; 0x07
     3d8:	f8 85       	ldd	r31, Y+8	; 0x08
     3da:	e2 9f       	mul	r30, r18
     3dc:	c0 01       	movw	r24, r0
     3de:	e3 9f       	mul	r30, r19
     3e0:	90 0d       	add	r25, r0
     3e2:	f2 9f       	mul	r31, r18
     3e4:	90 0d       	add	r25, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	8e 0d       	add	r24, r14
     3ea:	9f 1d       	adc	r25, r15
     3ec:	ed 81       	ldd	r30, Y+5	; 0x05
     3ee:	fe 81       	ldd	r31, Y+6	; 0x06
     3f0:	e8 0f       	add	r30, r24
     3f2:	f9 1f       	adc	r31, r25
     3f4:	39 81       	ldd	r19, Y+1	; 0x01
     3f6:	30 5d       	subi	r19, 0xD0	; 208
			history[code_size+(kierros*(code_size+2))+1]='0'+wp;
     3f8:	2b 81       	ldd	r18, Y+3	; 0x03
     3fa:	20 5d       	subi	r18, 0xD0	; 208
		{
			history[i+(kierros*(code_size+2))]=guess[i];
		}		
		for(int i=code_size; i < (code_size+2); i++)
		{
			history[code_size+(kierros*(code_size+2))]='0'+right_place;
     3fc:	30 83       	st	Z, r19
			history[code_size+(kierros*(code_size+2))+1]='0'+wp;
     3fe:	21 83       	std	Z+1, r18	; 0x01
		}

		// Tulostetaan historyn viimeinen rivi yläriville
		set_cursor_location(1,0);
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
		print_history(history, kierros, code_size);
     408:	8d 81       	ldd	r24, Y+5	; 0x05
     40a:	9e 81       	ldd	r25, Y+6	; 0x06
     40c:	6f 81       	ldd	r22, Y+7	; 0x07
     40e:	78 85       	ldd	r23, Y+8	; 0x08
     410:	a7 01       	movw	r20, r14
     412:	0e 94 a1 00 	call	0x142	; 0x142 <print_history>
		
		// Kasvatetaan kierrosluku
		++(*ptr);
     416:	e9 85       	ldd	r30, Y+9	; 0x09
     418:	fa 85       	ldd	r31, Y+10	; 0x0a
     41a:	80 81       	ld	r24, Z
     41c:	91 81       	ldd	r25, Z+1	; 0x01
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	80 83       	st	Z, r24

		// Funktio palauttaa arvon 1, mikäli ratkaisu on oikein
		if(right_place==code_size) return(1);
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	49 81       	ldd	r20, Y+1	; 0x01
     42a:	5a 81       	ldd	r21, Y+2	; 0x02
     42c:	4e 15       	cp	r20, r14
     42e:	5f 05       	cpc	r21, r15
     430:	11 f0       	breq	.+4      	; 0x436 <check_guess+0x1ee>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
		// Muuten palautetaan arvo 0
		else return(0);
}
     436:	82 2f       	mov	r24, r18
     438:	93 2f       	mov	r25, r19
     43a:	ed 85       	ldd	r30, Y+13	; 0x0d
     43c:	fe 85       	ldd	r31, Y+14	; 0x0e
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	fe bf       	out	0x3e, r31	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	ed bf       	out	0x3d, r30	; 61
     448:	60 96       	adiw	r28, 0x10	; 16
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	cf 91       	pop	r28
     456:	df 91       	pop	r29
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	bf 90       	pop	r11
     466:	af 90       	pop	r10
     468:	9f 90       	pop	r9
     46a:	8f 90       	pop	r8
     46c:	7f 90       	pop	r7
     46e:	6f 90       	pop	r6
     470:	5f 90       	pop	r5
     472:	3f 90       	pop	r3
     474:	2f 90       	pop	r2
     476:	08 95       	ret
			}
		
		}


		set_cursor_location(10,1);
     478:	8a e0       	ldi	r24, 0x0A	; 10
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
     480:	1c 82       	std	Y+4, r1	; 0x04
     482:	1b 82       	std	Y+3, r1	; 0x03
     484:	1a 82       	std	Y+2, r1	; 0x02
     486:	19 82       	std	Y+1, r1	; 0x01
     488:	a0 cf       	rjmp	.-192    	; 0x3ca <check_guess+0x182>

0000048a <browse_history>:
		// Muuten palautetaan arvo 0
		else return(0);
}

void browse_history(int kierros, int code_size, char *history)
{
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	4c 01       	movw	r8, r24
     4a4:	6b 01       	movw	r12, r22
     4a6:	7a 01       	movw	r14, r20
	// Set off a blinking cursor
	lcd_write_ctrl(LCD_ON | 0x00);
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	kierros=kierros-1;
	int kierros_max=kierros;
	
	while(!BUTTON4_DOWN)
     4b4:	cb 9b       	sbis	0x19, 3	; 25
     4b6:	45 c0       	rjmp	.+138    	; 0x542 <browse_history+0xb8>

void browse_history(int kierros, int code_size, char *history)
{
	// Set off a blinking cursor
	lcd_write_ctrl(LCD_ON | 0x00);
	kierros=kierros-1;
     4b8:	08 94       	sec
     4ba:	81 08       	sbc	r8, r1
     4bc:	91 08       	sbc	r9, r1
     4be:	84 01       	movw	r16, r8
		set_cursor_location(1,0);
		print_history(history, kierros, code_size);

		// Tulostetaan käynnissä oleva kierros
		set_cursor_location(14,0);
		lcd_write_data('0'+((kierros+1)/10));
     4c0:	0f 2e       	mov	r0, r31
     4c2:	fa e0       	ldi	r31, 0x0A	; 10
     4c4:	af 2e       	mov	r10, r31
     4c6:	bb 24       	eor	r11, r11
     4c8:	f0 2d       	mov	r31, r0
	kierros=kierros-1;
	int kierros_max=kierros;
	
	while(!BUTTON4_DOWN)
	{
		set_cursor_location(0,1);
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>

		// Tulostetaan kierroksen s historia rivi yläriville
		set_cursor_location(1,0);
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
		print_history(history, kierros, code_size);
     4da:	c7 01       	movw	r24, r14
     4dc:	b8 01       	movw	r22, r16
     4de:	a6 01       	movw	r20, r12
     4e0:	0e 94 a1 00 	call	0x142	; 0x142 <print_history>

		// Tulostetaan käynnissä oleva kierros
		set_cursor_location(14,0);
     4e4:	8e e0       	ldi	r24, 0x0E	; 14
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
		lcd_write_data('0'+((kierros+1)/10));
     4ec:	c8 01       	movw	r24, r16
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	b5 01       	movw	r22, r10
     4f2:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     4f6:	ec 01       	movw	r28, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	c0 96       	adiw	r24, 0x30	; 48
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		lcd_write_data('0'+((kierros+1)%10));
     504:	ce 01       	movw	r24, r28
     506:	c0 96       	adiw	r24, 0x30	; 48
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

		if(BUTTON1_DOWN)
     510:	c8 99       	sbic	0x19, 0	; 25
     512:	05 c0       	rjmp	.+10     	; 0x51e <browse_history+0x94>
		{
			if(kierros!=0) kierros--;
     514:	01 15       	cp	r16, r1
     516:	11 05       	cpc	r17, r1
     518:	11 f0       	breq	.+4      	; 0x51e <browse_history+0x94>
     51a:	01 50       	subi	r16, 0x01	; 1
     51c:	10 40       	sbci	r17, 0x00	; 0
		}

		if(BUTTON5_DOWN)
     51e:	cc 99       	sbic	0x19, 4	; 25
     520:	05 c0       	rjmp	.+10     	; 0x52c <browse_history+0xa2>
		{
			if(kierros!=kierros_max) kierros++;
     522:	08 15       	cp	r16, r8
     524:	19 05       	cpc	r17, r9
     526:	11 f0       	breq	.+4      	; 0x52c <browse_history+0xa2>
     528:	0f 5f       	subi	r16, 0xFF	; 255
     52a:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	97 e8       	ldi	r25, 0x87	; 135
     530:	a3 e1       	ldi	r26, 0x13	; 19
     532:	81 50       	subi	r24, 0x01	; 1
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	a0 40       	sbci	r26, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <browse_history+0xa8>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <browse_history+0xb2>
     53c:	00 00       	nop
	// Set off a blinking cursor
	lcd_write_ctrl(LCD_ON | 0x00);
	kierros=kierros-1;
	int kierros_max=kierros;
	
	while(!BUTTON4_DOWN)
     53e:	cb 99       	sbic	0x19, 3	; 25
     540:	c4 cf       	rjmp	.-120    	; 0x4ca <browse_history+0x40>

		_delay_ms(400);
	}

	// Blinking back on
	lcd_write_ctrl(LCD_ON | 0x01);
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	08 95       	ret

00000568 <scores>:

void scores(int kierros, char *scores_old)
{
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	00 d0       	rcall	.+0      	; 0x576 <scores+0xe>
     576:	00 d0       	rcall	.+0      	; 0x578 <scores+0x10>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	7b 01       	movw	r14, r22
	// Alustetaan muuttuja pisteille
	int scores=1000;

	// Laskukaava 1000p - käytetty aika - 10p per arvaus
	scores = scores - seconds - (kierros*10);
     57e:	20 91 c8 01 	lds	r18, 0x01C8
     582:	08 ee       	ldi	r16, 0xE8	; 232
     584:	13 e0       	ldi	r17, 0x03	; 3
     586:	02 1b       	sub	r16, r18
     588:	11 09       	sbc	r17, r1
     58a:	28 2f       	mov	r18, r24
     58c:	39 2f       	mov	r19, r25
     58e:	c9 01       	movw	r24, r18
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	28 0f       	add	r18, r24
     5a2:	39 1f       	adc	r19, r25
     5a4:	02 1b       	sub	r16, r18
     5a6:	13 0b       	sbc	r17, r19
     5a8:	12 f4       	brpl	.+4      	; 0x5ae <scores+0x46>
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	10 e0       	ldi	r17, 0x00	; 0
	// Pisteet eivät voi mennä minukselle
	if(scores < 0) scores = 0;


	// Tulostetaan pisteet alariville
	char scores_text[4]= "000";
     5ae:	80 91 00 01 	lds	r24, 0x0100
     5b2:	90 91 01 01 	lds	r25, 0x0101
     5b6:	a0 91 02 01 	lds	r26, 0x0102
     5ba:	b0 91 03 01 	lds	r27, 0x0103
     5be:	89 83       	std	Y+1, r24	; 0x01
     5c0:	9a 83       	std	Y+2, r25	; 0x02
     5c2:	ab 83       	std	Y+3, r26	; 0x03
     5c4:	bc 83       	std	Y+4, r27	; 0x04
	scores_text[0]='0'+scores/100;
     5c6:	c8 01       	movw	r24, r16
     5c8:	64 e6       	ldi	r22, 0x64	; 100
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     5d0:	e6 2f       	mov	r30, r22
     5d2:	e0 5d       	subi	r30, 0xD0	; 208
     5d4:	e9 83       	std	Y+1, r30	; 0x01
	scores_text[1]='0'+(scores%100)/10;
     5d6:	2a e0       	ldi	r18, 0x0A	; 10
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	b9 01       	movw	r22, r18
     5dc:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     5e0:	60 5d       	subi	r22, 0xD0	; 208
     5e2:	6a 83       	std	Y+2, r22	; 0x02
	scores_text[2]='0'+(scores%10);
     5e4:	c8 01       	movw	r24, r16
     5e6:	b9 01       	movw	r22, r18
     5e8:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     5ec:	80 5d       	subi	r24, 0xD0	; 208
     5ee:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0; i < 3; i++)
	{
		lcd_write_data(scores_text[i]);
     5f0:	8e 2f       	mov	r24, r30
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	}

	// Write data to eeprom
	if((scores > atoi(scores_old)) || (atoi(scores_old) > 1000))
     614:	c7 01       	movw	r24, r14
     616:	0e 94 8a 0a 	call	0x1514	; 0x1514 <atoi>
     61a:	80 17       	cp	r24, r16
     61c:	91 07       	cpc	r25, r17
     61e:	24 f0       	brlt	.+8      	; 0x628 <scores+0xc0>
     620:	23 e0       	ldi	r18, 0x03	; 3
     622:	89 3e       	cpi	r24, 0xE9	; 233
     624:	92 07       	cpc	r25, r18
     626:	44 f0       	brlt	.+16     	; 0x638 <scores+0xd0>
	{
		eeprom_write_block(scores_text, (const void*)10, 4);
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	6a e0       	ldi	r22, 0x0A	; 10
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	44 e0       	ldi	r20, 0x04	; 4
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__eewr_block_m128>
	}

}
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	cf 91       	pop	r28
     642:	df 91       	pop	r29
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	08 95       	ret

0000064e <insert_guess>:

// Funktio arvauksen syöttämiseen
void insert_guess(char *code, int code_size, char *history, char *scores_text)
{
     64e:	2f 92       	push	r2
     650:	3f 92       	push	r3
     652:	4f 92       	push	r4
     654:	5f 92       	push	r5
     656:	6f 92       	push	r6
     658:	7f 92       	push	r7
     65a:	8f 92       	push	r8
     65c:	9f 92       	push	r9
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	65 97       	sbiw	r28, 0x15	; 21
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	99 8b       	std	Y+17, r25	; 0x11
     684:	88 8b       	std	Y+16, r24	; 0x10
     686:	4b 01       	movw	r8, r22
     688:	2a 01       	movw	r4, r20
     68a:	3d 8b       	std	Y+21, r19	; 0x15
     68c:	2c 8b       	std	Y+20, r18	; 0x14
	// Määritellään min ja max, johon asti arvoa voi muuttaa
	char min='1';
	char max='6';

	// Alustetaan muuttujia
	int kierros=0;
     68e:	1a 82       	std	Y+2, r1	; 0x02
     690:	19 82       	std	Y+1, r1	; 0x01
	int cursor_location = 1;
	char guess[] = "1111";
     692:	de 01       	movw	r26, r28
     694:	13 96       	adiw	r26, 0x03	; 3
     696:	e4 e0       	ldi	r30, 0x04	; 4
     698:	f1 e0       	ldi	r31, 0x01	; 1
     69a:	85 e0       	ldi	r24, 0x05	; 5
     69c:	01 90       	ld	r0, Z+
     69e:	0d 92       	st	X+, r0
     6a0:	81 50       	subi	r24, 0x01	; 1
     6a2:	e1 f7       	brne	.-8      	; 0x69c <insert_guess+0x4e>

	// Nollataan ajanlasku ja tyhjennetään näyttö
	seconds = 0;
     6a4:	10 92 c8 01 	sts	0x01C8, r1
	lcd_write_ctrl(LCD_CLEAR);
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	char min='1';
	char max='6';

	// Alustetaan muuttujia
	int kierros=0;
	int cursor_location = 1;
     6b4:	ee 24       	eor	r14, r14
     6b6:	ff 24       	eor	r15, r15
     6b8:	e3 94       	inc	r14
		// History on käytössä ensimmäisen kierroksen jälkeen
		if (kierros != 0)
		{
			// Tulostetaan nuoli ylös
			set_cursor_location(0,0);
			lcd_write_data(0x00);
     6ba:	66 24       	eor	r6, r6
     6bc:	77 24       	eor	r7, r7
     6be:	63 94       	inc	r6
				_delay_ms(200);
			}
			/* Button 1 increases a value */
			if (BUTTON1_DOWN)
			{
				if (guess[cursor_location-1]==max);
     6c0:	0f 2e       	mov	r0, r31
     6c2:	f3 e0       	ldi	r31, 0x03	; 3
     6c4:	cf 2e       	mov	r12, r31
     6c6:	dd 24       	eor	r13, r13
     6c8:	f0 2d       	mov	r31, r0
     6ca:	cc 0e       	add	r12, r28
     6cc:	dd 1e       	adc	r13, r29
			/* Browse history at left */
			if ((cursor_location==0) && (kierros==0)) cursor_location++;
			if (cursor_location==0)
			{
				browse_history(kierros, code_size, history);
				cursor_location=1;
     6ce:	c3 01       	movw	r24, r6
     6d0:	b6 2c       	mov	r11, r6
     6d2:	a9 2e       	mov	r10, r25
				_delay_ms(200);
			}
			/* Button 5 decreases a value */
			if (BUTTON5_DOWN)
			{
				if (guess[cursor_location-1]==min);
     6d4:	c6 01       	movw	r24, r12
     6d6:	ca 8a       	std	Y+18, r12	; 0x12
     6d8:	9b 8b       	std	Y+19, r25	; 0x13
		}
		_delay_ms(200);

	// Tulostetaan kierroluku
	set_cursor_location(14,0);
	lcd_write_data('0'+((kierros+1)/10));
     6da:	0f 2e       	mov	r0, r31
     6dc:	fa e0       	ldi	r31, 0x0A	; 10
     6de:	2f 2e       	mov	r2, r31
     6e0:	33 24       	eor	r3, r3
     6e2:	f0 2d       	mov	r31, r0
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	99 e6       	ldi	r25, 0x69	; 105
     6e8:	a8 e1       	ldi	r26, 0x18	; 24
     6ea:	81 50       	subi	r24, 0x01	; 1
     6ec:	90 40       	sbci	r25, 0x00	; 0
     6ee:	a0 40       	sbci	r26, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <insert_guess+0x9c>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <insert_guess+0xa6>
     6f4:	00 00       	nop

	do
	{
		_delay_ms(500);
		// History on käytössä ensimmäisen kierroksen jälkeen
		if (kierros != 0)
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	89 f0       	breq	.+34     	; 0x720 <insert_guess+0xd2>
		{
			// Tulostetaan nuoli ylös
			set_cursor_location(0,0);
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			lcd_write_data(0x00);
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	b3 01       	movw	r22, r6
     70c:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			// Tulostetaan nuoli alas
			set_cursor_location(0,1);
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			lcd_write_data(0x01);
     718:	c3 01       	movw	r24, r6
     71a:	b3 01       	movw	r22, r6
     71c:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		}

	
		// Let's print the basic guess
		set_cursor_location(1,2);
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	62 e0       	ldi	r22, 0x02	; 2
     724:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
		int i=0;
		while (guess[i])
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	88 23       	and	r24, r24
     72c:	61 f0       	breq	.+24     	; 0x746 <insert_guess+0xf8>
     72e:	8e 01       	movw	r16, r28
     730:	0c 5f       	subi	r16, 0xFC	; 252
     732:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			lcd_write_data(guess[i]);
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	b3 01       	movw	r22, r6
     738:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

	
		// Let's print the basic guess
		set_cursor_location(1,2);
		int i=0;
		while (guess[i])
     73c:	d8 01       	movw	r26, r16
     73e:	8d 91       	ld	r24, X+
     740:	8d 01       	movw	r16, r26
     742:	88 23       	and	r24, r24
     744:	b9 f7       	brne	.-18     	; 0x734 <insert_guess+0xe6>
			lcd_write_data(guess[i]);
			i++;
		}

		// Set cursor in a blinking mode
		lcd_write_ctrl(LCD_ON | 0x01);
     746:	8d e0       	ldi	r24, 0x0D	; 13
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

		// Initialize cursor position 
		set_cursor_location(cursor_location,1);
     752:	8e 2d       	mov	r24, r14
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
		//int key_pressed=0;


		// Let's accept the code with the middle button
		// Accept changes after middle button (!BUTTON3_DOWN)
		while (!BUTTON3_DOWN)
     75a:	ca 9b       	sbis	0x19, 2	; 25
     75c:	84 c0       	rjmp	.+264    	; 0x866 <insert_guess+0x218>
		{
			/* Button 2 moves a cursor to left */
			if (BUTTON2_DOWN) if (cursor_location!=0) 
     75e:	c9 99       	sbic	0x19, 1	; 25
     760:	13 c0       	rjmp	.+38     	; 0x788 <insert_guess+0x13a>
     762:	e1 14       	cp	r14, r1
     764:	f1 04       	cpc	r15, r1
     766:	99 f0       	breq	.+38     	; 0x78e <insert_guess+0x140>
			{
				cursor_location--;
     768:	08 94       	sec
     76a:	e1 08       	sbc	r14, r1
     76c:	f1 08       	sbc	r15, r1
				set_cursor_location(cursor_location,1);
     76e:	8e 2d       	mov	r24, r14
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	93 ec       	ldi	r25, 0xC3	; 195
     77a:	a9 e0       	ldi	r26, 0x09	; 9
     77c:	81 50       	subi	r24, 0x01	; 1
     77e:	90 40       	sbci	r25, 0x00	; 0
     780:	a0 40       	sbci	r26, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <insert_guess+0x12e>
     784:	00 c0       	rjmp	.+0      	; 0x786 <insert_guess+0x138>
     786:	00 00       	nop
				_delay_ms(200);
			}
			/* Browse history at left */
			if ((cursor_location==0) && (kierros==0)) cursor_location++;
     788:	e1 14       	cp	r14, r1
     78a:	f1 04       	cpc	r15, r1
     78c:	39 f4       	brne	.+14     	; 0x79c <insert_guess+0x14e>
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	00 97       	sbiw	r24, 0x00	; 0
     794:	09 f0       	breq	.+2      	; 0x798 <insert_guess+0x14a>
     796:	da c0       	rjmp	.+436    	; 0x94c <insert_guess+0x2fe>
     798:	eb 2c       	mov	r14, r11
     79a:	fa 2c       	mov	r15, r10
				cursor_location=1;
				set_cursor_location(cursor_location,1);
				_delay_ms(200);
			}
			/* Button 4 moves a cursor to right */
			if (BUTTON4_DOWN) if (cursor_location!=code_size)
     79c:	cb 99       	sbic	0x19, 3	; 25
     79e:	13 c0       	rjmp	.+38     	; 0x7c6 <insert_guess+0x178>
     7a0:	e8 14       	cp	r14, r8
     7a2:	f9 04       	cpc	r15, r9
     7a4:	81 f0       	breq	.+32     	; 0x7c6 <insert_guess+0x178>
			{
				cursor_location++;
     7a6:	08 94       	sec
     7a8:	e1 1c       	adc	r14, r1
     7aa:	f1 1c       	adc	r15, r1
				set_cursor_location(cursor_location,1);
     7ac:	8e 2d       	mov	r24, r14
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	93 ec       	ldi	r25, 0xC3	; 195
     7b8:	a9 e0       	ldi	r26, 0x09	; 9
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	a0 40       	sbci	r26, 0x00	; 0
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <insert_guess+0x16c>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <insert_guess+0x176>
     7c4:	00 00       	nop
				_delay_ms(200);
			}
			/* Button 1 increases a value */
			if (BUTTON1_DOWN)
     7c6:	c8 99       	sbic	0x19, 0	; 25
     7c8:	23 c0       	rjmp	.+70     	; 0x810 <insert_guess+0x1c2>
			{
				if (guess[cursor_location-1]==max);
     7ca:	c7 01       	movw	r24, r14
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f6 01       	movw	r30, r12
     7d0:	e8 0f       	add	r30, r24
     7d2:	f9 1f       	adc	r31, r25
     7d4:	20 81       	ld	r18, Z
     7d6:	26 33       	cpi	r18, 0x36	; 54
     7d8:	29 f0       	breq	.+10     	; 0x7e4 <insert_guess+0x196>
				else guess[cursor_location-1]=guess[cursor_location-1]+1;
     7da:	f6 01       	movw	r30, r12
     7dc:	e8 0f       	add	r30, r24
     7de:	f9 1f       	adc	r31, r25
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	20 83       	st	Z, r18
				lcd_write_data(guess[cursor_location-1]);
     7e4:	8c 0d       	add	r24, r12
     7e6:	9d 1d       	adc	r25, r13
     7e8:	dc 01       	movw	r26, r24
     7ea:	8c 91       	ld	r24, X
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	6b 2d       	mov	r22, r11
     7f0:	7a 2d       	mov	r23, r10
     7f2:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
				set_cursor_location(cursor_location,1);
     7f6:	8e 2d       	mov	r24, r14
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	93 ec       	ldi	r25, 0xC3	; 195
     802:	a9 e0       	ldi	r26, 0x09	; 9
     804:	81 50       	subi	r24, 0x01	; 1
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	a0 40       	sbci	r26, 0x00	; 0
     80a:	e1 f7       	brne	.-8      	; 0x804 <insert_guess+0x1b6>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <insert_guess+0x1c0>
     80e:	00 00       	nop
				_delay_ms(200);
			}
			/* Button 5 decreases a value */
			if (BUTTON5_DOWN)
     810:	cc 99       	sbic	0x19, 4	; 25
     812:	23 c0       	rjmp	.+70     	; 0x85a <insert_guess+0x20c>
			{
				if (guess[cursor_location-1]==min);
     814:	c7 01       	movw	r24, r14
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f6 01       	movw	r30, r12
     81a:	e8 0f       	add	r30, r24
     81c:	f9 1f       	adc	r31, r25
     81e:	20 81       	ld	r18, Z
     820:	21 33       	cpi	r18, 0x31	; 49
     822:	29 f0       	breq	.+10     	; 0x82e <insert_guess+0x1e0>
				else guess[cursor_location-1]=guess[cursor_location-1]-1;
     824:	f6 01       	movw	r30, r12
     826:	e8 0f       	add	r30, r24
     828:	f9 1f       	adc	r31, r25
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	20 83       	st	Z, r18
				lcd_write_data(guess[cursor_location-1]);
     82e:	8c 0d       	add	r24, r12
     830:	9d 1d       	adc	r25, r13
     832:	dc 01       	movw	r26, r24
     834:	8c 91       	ld	r24, X
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	6b 2d       	mov	r22, r11
     83a:	7a 2d       	mov	r23, r10
     83c:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	93 ec       	ldi	r25, 0xC3	; 195
     844:	a9 e0       	ldi	r26, 0x09	; 9
     846:	81 50       	subi	r24, 0x01	; 1
     848:	90 40       	sbci	r25, 0x00	; 0
     84a:	a0 40       	sbci	r26, 0x00	; 0
     84c:	e1 f7       	brne	.-8      	; 0x846 <insert_guess+0x1f8>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <insert_guess+0x202>
     850:	00 00       	nop
				_delay_ms(200);
				set_cursor_location(cursor_location,1);
     852:	8e 2d       	mov	r24, r14
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			}
			set_cursor_location(cursor_location,1);
     85a:	8e 2d       	mov	r24, r14
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
		//int key_pressed=0;


		// Let's accept the code with the middle button
		// Accept changes after middle button (!BUTTON3_DOWN)
		while (!BUTTON3_DOWN)
     862:	ca 99       	sbic	0x19, 2	; 25
     864:	7c cf       	rjmp	.-264    	; 0x75e <insert_guess+0x110>
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	93 ec       	ldi	r25, 0xC3	; 195
     86a:	a9 e0       	ldi	r26, 0x09	; 9
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	90 40       	sbci	r25, 0x00	; 0
     870:	a0 40       	sbci	r26, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <insert_guess+0x21e>
     874:	00 c0       	rjmp	.+0      	; 0x876 <insert_guess+0x228>
     876:	00 00       	nop
			set_cursor_location(cursor_location,1);
		}
		_delay_ms(200);

	// Tulostetaan kierroluku
	set_cursor_location(14,0);
     878:	8e e0       	ldi	r24, 0x0E	; 14
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
	lcd_write_data('0'+((kierros+1)/10));
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	9a 81       	ldd	r25, Y+2	; 0x02
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	b1 01       	movw	r22, r2
     888:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     88c:	cb 01       	movw	r24, r22
     88e:	c0 96       	adiw	r24, 0x30	; 48
     890:	b3 01       	movw	r22, r6
     892:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	lcd_write_data('0'+((kierros+1)%10));
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	b1 01       	movw	r22, r2
     89e:	0e 94 05 0a 	call	0x140a	; 0x140a <__divmodhi4>
     8a2:	c0 96       	adiw	r24, 0x30	; 48
     8a4:	b3 01       	movw	r22, r6
     8a6:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		

	} while(!check_guess(code, guess, code_size, history, &kierros)); // Toistetaan, kunnes arvataan oikein
     8aa:	88 89       	ldd	r24, Y+16	; 0x10
     8ac:	99 89       	ldd	r25, Y+17	; 0x11
     8ae:	6a 89       	ldd	r22, Y+18	; 0x12
     8b0:	7b 89       	ldd	r23, Y+19	; 0x13
     8b2:	a4 01       	movw	r20, r8
     8b4:	92 01       	movw	r18, r4
     8b6:	8e 01       	movw	r16, r28
     8b8:	0f 5f       	subi	r16, 0xFF	; 255
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	0e 94 24 01 	call	0x248	; 0x248 <check_guess>
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <insert_guess+0x278>
     8c4:	0f cf       	rjmp	.-482    	; 0x6e4 <insert_guess+0x96>

	lcd_write_ctrl(LCD_CLEAR); /* tyhjentää näytön */
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

	char text[]="Voitit!";
     8d2:	de 01       	movw	r26, r28
     8d4:	18 96       	adiw	r26, 0x08	; 8
     8d6:	e9 e0       	ldi	r30, 0x09	; 9
     8d8:	f1 e0       	ldi	r31, 0x01	; 1
     8da:	88 e0       	ldi	r24, 0x08	; 8
     8dc:	01 90       	ld	r0, Z+
     8de:	0d 92       	st	X+, r0
     8e0:	81 50       	subi	r24, 0x01	; 1
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <insert_guess+0x28e>
     8e4:	8e 01       	movw	r16, r28
     8e6:	08 5f       	subi	r16, 0xF8	; 248
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
	}

}

// Funktio arvauksen syöttämiseen
void insert_guess(char *code, int code_size, char *history, char *scores_text)
     8ea:	0f 2e       	mov	r0, r31
     8ec:	ff e0       	ldi	r31, 0x0F	; 15
     8ee:	ef 2e       	mov	r14, r31
     8f0:	ff 24       	eor	r15, r15
     8f2:	f0 2d       	mov	r31, r0
     8f4:	ec 0e       	add	r14, r28
     8f6:	fd 1e       	adc	r15, r29
	lcd_write_ctrl(LCD_CLEAR); /* tyhjentää näytön */

	char text[]="Voitit!";
	for (int i=0; i < 7; i++)
	{
		lcd_write_data(text[i]);
     8f8:	d8 01       	movw	r26, r16
     8fa:	8d 91       	ld	r24, X+
     8fc:	8d 01       	movw	r16, r26
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	} while(!check_guess(code, guess, code_size, history, &kierros)); // Toistetaan, kunnes arvataan oikein

	lcd_write_ctrl(LCD_CLEAR); /* tyhjentää näytön */

	char text[]="Voitit!";
	for (int i=0; i < 7; i++)
     908:	0e 15       	cp	r16, r14
     90a:	1f 05       	cpc	r17, r15
     90c:	a9 f7       	brne	.-22     	; 0x8f8 <insert_guess+0x2aa>
	{
		lcd_write_data(text[i]);
	}

	scores(kierros, scores_text);
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	9a 81       	ldd	r25, Y+2	; 0x02
     912:	6c 89       	ldd	r22, Y+20	; 0x14
     914:	7d 89       	ldd	r23, Y+21	; 0x15
     916:	0e 94 b4 02 	call	0x568	; 0x568 <scores>

}
     91a:	65 96       	adiw	r28, 0x15	; 21
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	9f 90       	pop	r9
     93c:	8f 90       	pop	r8
     93e:	7f 90       	pop	r7
     940:	6f 90       	pop	r6
     942:	5f 90       	pop	r5
     944:	4f 90       	pop	r4
     946:	3f 90       	pop	r3
     948:	2f 90       	pop	r2
     94a:	08 95       	ret
			}
			/* Browse history at left */
			if ((cursor_location==0) && (kierros==0)) cursor_location++;
			if (cursor_location==0)
			{
				browse_history(kierros, code_size, history);
     94c:	b4 01       	movw	r22, r8
     94e:	a2 01       	movw	r20, r4
     950:	0e 94 45 02 	call	0x48a	; 0x48a <browse_history>
				cursor_location=1;
				set_cursor_location(cursor_location,1);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	93 ec       	ldi	r25, 0xC3	; 195
     960:	a9 e0       	ldi	r26, 0x09	; 9
     962:	81 50       	subi	r24, 0x01	; 1
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	a0 40       	sbci	r26, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <insert_guess+0x314>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <insert_guess+0x31e>
     96c:	00 00       	nop
			/* Browse history at left */
			if ((cursor_location==0) && (kierros==0)) cursor_location++;
			if (cursor_location==0)
			{
				browse_history(kierros, code_size, history);
				cursor_location=1;
     96e:	eb 2c       	mov	r14, r11
     970:	fa 2c       	mov	r15, r10
     972:	14 cf       	rjmp	.-472    	; 0x79c <insert_guess+0x14e>

00000974 <print_text>:
}

// Print text to position x,y
// If z is 1, clear screen
void print_text(unsigned char x, unsigned char y, int z, char *ptr)
{
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	08 2f       	mov	r16, r24
     97e:	16 2f       	mov	r17, r22
     980:	e9 01       	movw	r28, r18
	if(z==1) lcd_write_ctrl(LCD_CLEAR);
     982:	41 30       	cpi	r20, 0x01	; 1
     984:	51 05       	cpc	r21, r1
     986:	31 f4       	brne	.+12     	; 0x994 <print_text+0x20>
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	set_cursor_location(x,y);
     994:	80 2f       	mov	r24, r16
     996:	61 2f       	mov	r22, r17
     998:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
	int i=0;
	
	while(ptr[i])
     99c:	88 81       	ld	r24, Y
     99e:	88 23       	and	r24, r24
     9a0:	49 f0       	breq	.+18     	; 0x9b4 <print_text+0x40>

}

// Print text to position x,y
// If z is 1, clear screen
void print_text(unsigned char x, unsigned char y, int z, char *ptr)
     9a2:	21 96       	adiw	r28, 0x01	; 1
	set_cursor_location(x,y);
	int i=0;
	
	while(ptr[i])
	{
		lcd_write_data(ptr[i]);
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
{
	if(z==1) lcd_write_ctrl(LCD_CLEAR);
	set_cursor_location(x,y);
	int i=0;
	
	while(ptr[i])
     9ae:	89 91       	ld	r24, Y+
     9b0:	88 23       	and	r24, r24
     9b2:	c1 f7       	brne	.-16     	; 0x9a4 <print_text+0x30>
	{
		lcd_write_data(ptr[i]);
		i++;
	}
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <introduction>:
	introduction();
}


void introduction()
{
     9be:	2f 92       	push	r2
     9c0:	3f 92       	push	r3
     9c2:	4f 92       	push	r4
     9c4:	5f 92       	push	r5
     9c6:	6f 92       	push	r6
     9c8:	7f 92       	push	r7
     9ca:	8f 92       	push	r8
     9cc:	9f 92       	push	r9
     9ce:	af 92       	push	r10
     9d0:	bf 92       	push	r11
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	c6 55       	subi	r28, 0x56	; 86
     9e6:	d0 40       	sbci	r29, 0x00	; 0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
	int aika=0;
	int screen=0;

	/* Define screen texts */
	char text1[] = "Move cursor";
     9f2:	de 01       	movw	r26, r28
     9f4:	11 96       	adiw	r26, 0x01	; 1
     9f6:	e1 e1       	ldi	r30, 0x11	; 17
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
     9fa:	8c e0       	ldi	r24, 0x0C	; 12
     9fc:	01 90       	ld	r0, Z+
     9fe:	0d 92       	st	X+, r0
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	e1 f7       	brne	.-8      	; 0x9fc <introduction+0x3e>
	char text2[] = "Change value";
     a04:	de 01       	movw	r26, r28
     a06:	1d 96       	adiw	r26, 0x0d	; 13
     a08:	ed e1       	ldi	r30, 0x1D	; 29
     a0a:	f1 e0       	ldi	r31, 0x01	; 1
     a0c:	8d e0       	ldi	r24, 0x0D	; 13
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	81 50       	subi	r24, 0x01	; 1
     a14:	e1 f7       	brne	.-8      	; 0xa0e <introduction+0x50>
	char text3[] = "At left side:";
     a16:	de 01       	movw	r26, r28
     a18:	5a 96       	adiw	r26, 0x1a	; 26
     a1a:	ea e2       	ldi	r30, 0x2A	; 42
     a1c:	f1 e0       	ldi	r31, 0x01	; 1
     a1e:	8e e0       	ldi	r24, 0x0E	; 14
     a20:	01 90       	ld	r0, Z+
     a22:	0d 92       	st	X+, r0
     a24:	81 50       	subi	r24, 0x01	; 1
     a26:	e1 f7       	brne	.-8      	; 0xa20 <introduction+0x62>
	char text4[] = "Read history";
     a28:	de 01       	movw	r26, r28
     a2a:	98 96       	adiw	r26, 0x28	; 40
     a2c:	e8 e3       	ldi	r30, 0x38	; 56
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	8d e0       	ldi	r24, 0x0D	; 13
     a32:	01 90       	ld	r0, Z+
     a34:	0d 92       	st	X+, r0
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	e1 f7       	brne	.-8      	; 0xa32 <introduction+0x74>
	char text5[] = "B3 accepts guess";
     a3a:	de 01       	movw	r26, r28
     a3c:	d5 96       	adiw	r26, 0x35	; 53
     a3e:	e5 e4       	ldi	r30, 0x45	; 69
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	81 e1       	ldi	r24, 0x11	; 17
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	81 50       	subi	r24, 0x01	; 1
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <introduction+0x86>
	char text6[] = "and starts game!";
     a4c:	de 01       	movw	r26, r28
     a4e:	aa 5b       	subi	r26, 0xBA	; 186
     a50:	bf 4f       	sbci	r27, 0xFF	; 255
     a52:	e6 e5       	ldi	r30, 0x56	; 86
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	81 e1       	ldi	r24, 0x11	; 17
     a58:	01 90       	ld	r0, Z+
     a5a:	0d 92       	st	X+, r0
     a5c:	81 50       	subi	r24, 0x01	; 1
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <introduction+0x9a>

	/* Start timer */
	TCCR1B |= (1 << CS12) | (1 << CS10);
     a60:	8e b5       	in	r24, 0x2e	; 46
     a62:	85 60       	ori	r24, 0x05	; 5
     a64:	8e bd       	out	0x2e, r24	; 46

	/* Sallitaan keskeytykset */
	SREG |= (1 << 7);
     a66:	8f b7       	in	r24, 0x3f	; 63
     a68:	80 68       	ori	r24, 0x80	; 128
     a6a:	8f bf       	out	0x3f, r24	; 63


void introduction()
{
	int aika=0;
	int screen=0;
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
	SREG |= (1 << 7);

	/* Loop instructions */
	while(!BUTTON3_DOWN)
	{
		aika = seconds%6;
     a70:	0f 2e       	mov	r0, r31
     a72:	f6 e0       	ldi	r31, 0x06	; 6
     a74:	ff 2e       	mov	r15, r31
     a76:	f0 2d       	mov	r31, r0

		if((aika == 4) && (screen!=3))
		{
			/* Third screen */
			screen=3;
			print_text(0,0,1,text5);
     a78:	0f 2e       	mov	r0, r31
     a7a:	f5 e3       	ldi	r31, 0x35	; 53
     a7c:	6f 2e       	mov	r6, r31
     a7e:	77 24       	eor	r7, r7
     a80:	f0 2d       	mov	r31, r0
     a82:	6c 0e       	add	r6, r28
     a84:	7d 1e       	adc	r7, r29
			print_text(0,1,0,text6);
     a86:	0f 2e       	mov	r0, r31
     a88:	f6 e4       	ldi	r31, 0x46	; 70
     a8a:	4f 2e       	mov	r4, r31
     a8c:	55 24       	eor	r5, r5
     a8e:	f0 2d       	mov	r31, r0
     a90:	4c 0e       	add	r4, r28
     a92:	5d 1e       	adc	r5, r29
		}

		if((aika == 4) && (screen!=3))
		{
			/* Third screen */
			screen=3;
     a94:	03 e0       	ldi	r16, 0x03	; 3
     a96:	10 e0       	ldi	r17, 0x00	; 0
		{
			/* Second screen */
			screen=2;
			lcd_write_ctrl(LCD_CLEAR);
			set_cursor_location(0,0);
			print_text(0,0,0,text3);
     a98:	0f 2e       	mov	r0, r31
     a9a:	fa e1       	ldi	r31, 0x1A	; 26
     a9c:	2f 2e       	mov	r2, r31
     a9e:	33 24       	eor	r3, r3
     aa0:	f0 2d       	mov	r31, r0
     aa2:	2c 0e       	add	r2, r28
     aa4:	3d 1e       	adc	r3, r29


		if((aika == 2) && (screen!=2))
		{
			/* Second screen */
			screen=2;
     aa6:	cc 24       	eor	r12, r12
     aa8:	dd 24       	eor	r13, r13
     aaa:	68 94       	set
     aac:	c1 f8       	bld	r12, 1
			screen=1;
			lcd_write_ctrl(LCD_CLEAR);
			set_cursor_location(0,0);
			lcd_write_data(0x02);
			lcd_write_data(0x03);
			print_text(3,0,0,text1);
     aae:	5e 01       	movw	r10, r28
     ab0:	08 94       	sec
     ab2:	a1 1c       	adc	r10, r1
     ab4:	b1 1c       	adc	r11, r1
			set_cursor_location(0,1);
			lcd_write_data(0x00);
			lcd_write_data(0x01);
			print_text(3,1,0,text2);
     ab6:	0f 2e       	mov	r0, r31
     ab8:	fd e0       	ldi	r31, 0x0D	; 13
     aba:	8f 2e       	mov	r8, r31
     abc:	99 24       	eor	r9, r9
     abe:	f0 2d       	mov	r31, r0
     ac0:	8c 0e       	add	r8, r28
     ac2:	9d 1e       	adc	r9, r29

	/* Sallitaan keskeytykset */
	SREG |= (1 << 7);

	/* Loop instructions */
	while(!BUTTON3_DOWN)
     ac4:	9e c0       	rjmp	.+316    	; 0xc02 <introduction+0x244>
	{
		aika = seconds%6;
     ac6:	80 91 c8 01 	lds	r24, 0x01C8
     aca:	6f 2d       	mov	r22, r15
     acc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__udivmodqi4>
     ad0:	89 2f       	mov	r24, r25
     ad2:	90 e0       	ldi	r25, 0x00	; 0

		if((aika == 0) && (screen!=1))
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	09 f0       	breq	.+2      	; 0xada <introduction+0x11c>
     ad8:	4c c0       	rjmp	.+152    	; 0xb72 <introduction+0x1b4>
     ada:	21 30       	cpi	r18, 0x01	; 1
     adc:	31 05       	cpc	r19, r1
     ade:	09 f4       	brne	.+2      	; 0xae2 <introduction+0x124>
     ae0:	48 c0       	rjmp	.+144    	; 0xb72 <introduction+0x1b4>
		{
			/* First screen */
			screen=1;
			lcd_write_ctrl(LCD_CLEAR);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			set_cursor_location(0,0);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			lcd_write_data(0x02);
     af6:	c6 01       	movw	r24, r12
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			lcd_write_data(0x03);
     b00:	c8 01       	movw	r24, r16
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			print_text(3,0,0,text1);
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	95 01       	movw	r18, r10
     b14:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>
			set_cursor_location(0,1);
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			lcd_write_data(0x00);
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			lcd_write_data(0x01);
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			print_text(3,1,0,text2);
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	94 01       	movw	r18, r8
     b42:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	97 ea       	ldi	r25, 0xA7	; 167
     b4a:	a1 e6       	ldi	r26, 0x61	; 97
     b4c:	81 50       	subi	r24, 0x01	; 1
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	a0 40       	sbci	r26, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <introduction+0x18e>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <introduction+0x198>
     b56:	00 00       	nop
			_delay_ms(2000);
			set_cursor_location(15,0);
     b58:	8f e0       	ldi	r24, 0x0F	; 15
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			lcd_write_data('0'+aika);
     b60:	80 e3       	ldi	r24, 0x30	; 48
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		aika = seconds%6;

		if((aika == 0) && (screen!=1))
		{
			/* First screen */
			screen=1;
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	48 c0       	rjmp	.+144    	; 0xc02 <introduction+0x244>
			set_cursor_location(15,0);
			lcd_write_data('0'+aika);
		}


		if((aika == 2) && (screen!=2))
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	91 05       	cpc	r25, r1
     b76:	81 f5       	brne	.+96     	; 0xbd8 <introduction+0x21a>
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <introduction+0x1c2>
     b7e:	41 c0       	rjmp	.+130    	; 0xc02 <introduction+0x244>
		{
			/* Second screen */
			screen=2;
			lcd_write_ctrl(LCD_CLEAR);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			set_cursor_location(0,0);
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			print_text(0,0,0,text3);
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	91 01       	movw	r18, r2
     b9e:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>
			set_cursor_location(0,1);
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
			lcd_write_data(0x00);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			lcd_write_data(0x01);
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
			print_text(3,1,0,text4);
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	9e 01       	movw	r18, r28
     bcc:	28 5d       	subi	r18, 0xD8	; 216
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>


		if((aika == 2) && (screen!=2))
		{
			/* Second screen */
			screen=2;
     bd4:	96 01       	movw	r18, r12
     bd6:	15 c0       	rjmp	.+42     	; 0xc02 <introduction+0x244>
			lcd_write_data(0x00);
			lcd_write_data(0x01);
			print_text(3,1,0,text4);
		}

		if((aika == 4) && (screen!=3))
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	91 05       	cpc	r25, r1
     bdc:	91 f4       	brne	.+36     	; 0xc02 <introduction+0x244>
     bde:	23 30       	cpi	r18, 0x03	; 3
     be0:	31 05       	cpc	r19, r1
     be2:	79 f0       	breq	.+30     	; 0xc02 <introduction+0x244>
		{
			/* Third screen */
			screen=3;
			print_text(0,0,1,text5);
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	41 e0       	ldi	r20, 0x01	; 1
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	93 01       	movw	r18, r6
     bee:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>
			print_text(0,1,0,text6);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	92 01       	movw	r18, r4
     bfc:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>
		}

		if((aika == 4) && (screen!=3))
		{
			/* Third screen */
			screen=3;
     c00:	98 01       	movw	r18, r16

	/* Sallitaan keskeytykset */
	SREG |= (1 << 7);

	/* Loop instructions */
	while(!BUTTON3_DOWN)
     c02:	ca 99       	sbic	0x19, 2	; 25
     c04:	60 cf       	rjmp	.-320    	; 0xac6 <introduction+0x108>
			print_text(0,1,0,text6);
		}


	}
}
     c06:	ca 5a       	subi	r28, 0xAA	; 170
     c08:	df 4f       	sbci	r29, 0xFF	; 255
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	7f 90       	pop	r7
     c2c:	6f 90       	pop	r6
     c2e:	5f 90       	pop	r5
     c30:	4f 90       	pop	r4
     c32:	3f 90       	pop	r3
     c34:	2f 90       	pop	r2
     c36:	08 95       	ret

00000c38 <menu>:
		i++;
	}
}

void menu(char* name, char* scores_text)
{
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	ad 97       	sbiw	r28, 0x2d	; 45
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	8c 01       	movw	r16, r24
     c56:	f6 2e       	mov	r15, r22
     c58:	e7 2e       	mov	r14, r23
	/* Welcome texts */
	char str1[] = "Welcome to      ";
     c5a:	de 01       	movw	r26, r28
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	e7 e6       	ldi	r30, 0x67	; 103
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	81 e1       	ldi	r24, 0x11	; 17
     c64:	01 90       	ld	r0, Z+
     c66:	0d 92       	st	X+, r0
     c68:	81 50       	subi	r24, 0x01	; 1
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <menu+0x2c>
	char str2[] = "MasterMind      ";
     c6c:	de 01       	movw	r26, r28
     c6e:	52 96       	adiw	r26, 0x12	; 18
     c70:	e8 e7       	ldi	r30, 0x78	; 120
     c72:	f1 e0       	ldi	r31, 0x01	; 1
     c74:	81 e1       	ldi	r24, 0x11	; 17
     c76:	01 90       	ld	r0, Z+
     c78:	0d 92       	st	X+, r0
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <menu+0x3e>
	print_text(0,0,1,str1);
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	9e 01       	movw	r18, r28
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>
	print_text(0,1,0,str2);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	9e 01       	movw	r18, r28
     c98:	2e 5e       	subi	r18, 0xEE	; 238
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>

	/* Press the middle button to continue */
	while(!BUTTON3_DOWN);
     ca0:	ca 99       	sbic	0x19, 2	; 25
     ca2:	fe cf       	rjmp	.-4      	; 0xca0 <menu+0x68>

	char str3[] = "Highscore:";
     ca4:	de 01       	movw	r26, r28
     ca6:	93 96       	adiw	r26, 0x23	; 35
     ca8:	e9 e8       	ldi	r30, 0x89	; 137
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	8b e0       	ldi	r24, 0x0B	; 11
     cae:	01 90       	ld	r0, Z+
     cb0:	0d 92       	st	X+, r0
     cb2:	81 50       	subi	r24, 0x01	; 1
     cb4:	e1 f7       	brne	.-8      	; 0xcae <menu+0x76>
	print_text(0,0,1,str3);
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	9e 01       	movw	r18, r28
     cbe:	2d 5d       	subi	r18, 0xDD	; 221
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>

	set_cursor_location(0,1);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
	/* Playername */
	lcd_write_data(name[0]);
     cce:	d8 01       	movw	r26, r16
     cd0:	8c 91       	ld	r24, X
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	lcd_write_data(name[1]);
     cdc:	f8 01       	movw	r30, r16
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	lcd_write_data(name[2]);
     cea:	d8 01       	movw	r26, r16
     cec:	12 96       	adiw	r26, 0x02	; 2
     cee:	8c 91       	ld	r24, X
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	lcd_write_data(':');
     cfa:	8a e3       	ldi	r24, 0x3A	; 58
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
     d06:	8e 2d       	mov	r24, r14
     d08:	ef 2c       	mov	r14, r15
     d0a:	f8 2e       	mov	r15, r24
	/* Scores */
	for(int i=0; i < 3; i++)
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_write_data(scores_text[i]);
     d10:	f7 01       	movw	r30, r14
     d12:	81 91       	ld	r24, Z+
     d14:	7f 01       	movw	r14, r30
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	lcd_write_data(name[0]);
	lcd_write_data(name[1]);
	lcd_write_data(name[2]);
	lcd_write_data(':');
	/* Scores */
	for(int i=0; i < 3; i++)
     d20:	0f 5f       	subi	r16, 0xFF	; 255
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	03 30       	cpi	r16, 0x03	; 3
     d26:	11 05       	cpc	r17, r1
     d28:	99 f7       	brne	.-26     	; 0xd10 <menu+0xd8>
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	9b e7       	ldi	r25, 0x7B	; 123
     d2e:	a2 e9       	ldi	r26, 0x92	; 146
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	a0 40       	sbci	r26, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <menu+0xf8>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <menu+0x102>
     d3a:	00 00       	nop
		lcd_write_data(scores_text[i]);
	}

	//print_text(0,1,0,str4);
	_delay_ms(3000);
	introduction();
     d3c:	0e 94 df 04 	call	0x9be	; 0x9be <introduction>
}
     d40:	ad 96       	adiw	r28, 0x2d	; 45
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	08 95       	ret

00000d5a <getname>:
	}
}


void getname(char *name)
{
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	2c 97       	sbiw	r28, 0x0c	; 12
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	7c 01       	movw	r14, r24
	lcd_write_ctrl(LCD_CLEAR);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	char str[] = "Insert name";
     d88:	de 01       	movw	r26, r28
     d8a:	11 96       	adiw	r26, 0x01	; 1
     d8c:	e4 e9       	ldi	r30, 0x94	; 148
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	8c e0       	ldi	r24, 0x0C	; 12
     d92:	01 90       	ld	r0, Z+
     d94:	0d 92       	st	X+, r0
     d96:	81 50       	subi	r24, 0x01	; 1
     d98:	e1 f7       	brne	.-8      	; 0xd92 <getname+0x38>
	lcd_write_ctrl(LCD_ON | 0x01);
     d9a:	8d e0       	ldi	r24, 0x0D	; 13
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	print_text(0,0,1,str);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	9e 01       	movw	r18, r28
     db0:	2f 5f       	subi	r18, 0xFF	; 255
     db2:	3f 4f       	sbci	r19, 0xFF	; 255
     db4:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	93 ed       	ldi	r25, 0xD3	; 211
     dbc:	a0 e3       	ldi	r26, 0x30	; 48
     dbe:	81 50       	subi	r24, 0x01	; 1
     dc0:	90 40       	sbci	r25, 0x00	; 0
     dc2:	a0 40       	sbci	r26, 0x00	; 0
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <getname+0x64>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <getname+0x6e>
     dc8:	00 00       	nop
	_delay_ms(1000);

	int cursor_location=0;
	int name_length=2;
	print_text(0,1,0,name);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	97 01       	movw	r18, r14
     dd4:	0e 94 ba 04 	call	0x974	; 0x974 <print_text>

	// Let's accept the name with the middle button
	while (!BUTTON3_DOWN)
     dd8:	ca 9b       	sbis	0x19, 2	; 25
     dda:	6a c0       	rjmp	.+212    	; 0xeb0 <getname+0x156>
	char str[] = "Insert name";
	lcd_write_ctrl(LCD_ON | 0x01);
	print_text(0,0,1,str);
	_delay_ms(1000);

	int cursor_location=0;
     ddc:	00 e0       	ldi	r16, 0x00	; 0
     dde:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
		}
		if (BUTTON1_DOWN)
		{
			_delay_ms(200);
			if ((int)name[cursor_location]==57) name[cursor_location]=65; // From 0 --> A
     de0:	0f 2e       	mov	r0, r31
     de2:	f1 e4       	ldi	r31, 0x41	; 65
     de4:	df 2e       	mov	r13, r31
     de6:	f0 2d       	mov	r31, r0
			lcd_write_data(name[cursor_location]);
		}
		if (BUTTON5_DOWN)
		{
			_delay_ms(200);
			if ((int)name[cursor_location]==65) name[cursor_location]=57; // From A --> 0
     de8:	0f 2e       	mov	r0, r31
     dea:	f9 e3       	ldi	r31, 0x39	; 57
     dec:	cf 2e       	mov	r12, r31
     dee:	f0 2d       	mov	r31, r0

	// Let's accept the name with the middle button
	while (!BUTTON3_DOWN)
	{	
		/* Sets A-Z and 0-9 to name */
		if (BUTTON2_DOWN) if (cursor_location!=0) 
     df0:	c9 99       	sbic	0x19, 1	; 25
     df2:	0e c0       	rjmp	.+28     	; 0xe10 <getname+0xb6>
     df4:	01 15       	cp	r16, r1
     df6:	11 05       	cpc	r17, r1
     df8:	59 f0       	breq	.+22     	; 0xe10 <getname+0xb6>
		{
			cursor_location--;
     dfa:	01 50       	subi	r16, 0x01	; 1
     dfc:	10 40       	sbci	r17, 0x00	; 0
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	93 ec       	ldi	r25, 0xC3	; 195
     e02:	a9 e0       	ldi	r26, 0x09	; 9
     e04:	81 50       	subi	r24, 0x01	; 1
     e06:	90 40       	sbci	r25, 0x00	; 0
     e08:	a0 40       	sbci	r26, 0x00	; 0
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <getname+0xaa>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <getname+0xb4>
     e0e:	00 00       	nop
			_delay_ms(200);
		}
		if (BUTTON4_DOWN) if (cursor_location!=name_length) 
     e10:	cb 99       	sbic	0x19, 3	; 25
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <getname+0xd6>
     e14:	02 30       	cpi	r16, 0x02	; 2
     e16:	11 05       	cpc	r17, r1
     e18:	59 f0       	breq	.+22     	; 0xe30 <getname+0xd6>
		{
			cursor_location++;
     e1a:	0f 5f       	subi	r16, 0xFF	; 255
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	93 ec       	ldi	r25, 0xC3	; 195
     e22:	a9 e0       	ldi	r26, 0x09	; 9
     e24:	81 50       	subi	r24, 0x01	; 1
     e26:	90 40       	sbci	r25, 0x00	; 0
     e28:	a0 40       	sbci	r26, 0x00	; 0
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <getname+0xca>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <getname+0xd4>
     e2e:	00 00       	nop
			_delay_ms(200);
		}
		if (BUTTON1_DOWN)
     e30:	c8 99       	sbic	0x19, 0	; 25
     e32:	1b c0       	rjmp	.+54     	; 0xe6a <getname+0x110>
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	93 ec       	ldi	r25, 0xC3	; 195
     e38:	a9 e0       	ldi	r26, 0x09	; 9
     e3a:	81 50       	subi	r24, 0x01	; 1
     e3c:	90 40       	sbci	r25, 0x00	; 0
     e3e:	a0 40       	sbci	r26, 0x00	; 0
     e40:	e1 f7       	brne	.-8      	; 0xe3a <getname+0xe0>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <getname+0xea>
     e44:	00 00       	nop
		{
			_delay_ms(200);
			if ((int)name[cursor_location]==57) name[cursor_location]=65; // From 0 --> A
     e46:	f7 01       	movw	r30, r14
     e48:	e0 0f       	add	r30, r16
     e4a:	f1 1f       	adc	r31, r17
     e4c:	80 81       	ld	r24, Z
     e4e:	89 33       	cpi	r24, 0x39	; 57
     e50:	11 f4       	brne	.+4      	; 0xe56 <getname+0xfc>
     e52:	d0 82       	st	Z, r13
     e54:	04 c0       	rjmp	.+8      	; 0xe5e <getname+0x104>
			else if ((int)name[cursor_location]==90);
     e56:	8a 35       	cpi	r24, 0x5A	; 90
     e58:	11 f0       	breq	.+4      	; 0xe5e <getname+0x104>
			else name[cursor_location]=(int)name[cursor_location]+1;
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	80 83       	st	Z, r24
			lcd_write_data(name[cursor_location]);
     e5e:	80 81       	ld	r24, Z
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		}
		if (BUTTON5_DOWN)
     e6a:	cc 99       	sbic	0x19, 4	; 25
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <getname+0x14a>
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	93 ec       	ldi	r25, 0xC3	; 195
     e72:	a9 e0       	ldi	r26, 0x09	; 9
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	90 40       	sbci	r25, 0x00	; 0
     e78:	a0 40       	sbci	r26, 0x00	; 0
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <getname+0x11a>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <getname+0x124>
     e7e:	00 00       	nop
		{
			_delay_ms(200);
			if ((int)name[cursor_location]==65) name[cursor_location]=57; // From A --> 0
     e80:	f7 01       	movw	r30, r14
     e82:	e0 0f       	add	r30, r16
     e84:	f1 1f       	adc	r31, r17
     e86:	80 81       	ld	r24, Z
     e88:	81 34       	cpi	r24, 0x41	; 65
     e8a:	11 f4       	brne	.+4      	; 0xe90 <getname+0x136>
     e8c:	c0 82       	st	Z, r12
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <getname+0x13e>
			else if ((int)name[cursor_location]==48);
     e90:	80 33       	cpi	r24, 0x30	; 48
     e92:	11 f0       	breq	.+4      	; 0xe98 <getname+0x13e>
			else name[cursor_location]=(int)name[cursor_location]-1;
     e94:	81 50       	subi	r24, 0x01	; 1
     e96:	80 83       	st	Z, r24
			lcd_write_data(name[cursor_location]);
     e98:	80 81       	ld	r24, Z
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		}
		set_cursor_location(cursor_location,1);
     ea4:	80 2f       	mov	r24, r16
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	0e 94 12 01 	call	0x224	; 0x224 <set_cursor_location>
	int cursor_location=0;
	int name_length=2;
	print_text(0,1,0,name);

	// Let's accept the name with the middle button
	while (!BUTTON3_DOWN)
     eac:	ca 99       	sbic	0x19, 2	; 25
     eae:	a0 cf       	rjmp	.-192    	; 0xdf0 <getname+0x96>
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	93 ec       	ldi	r25, 0xC3	; 195
     eb4:	a9 e0       	ldi	r26, 0x09	; 9
     eb6:	81 50       	subi	r24, 0x01	; 1
     eb8:	90 40       	sbci	r25, 0x00	; 0
     eba:	a0 40       	sbci	r26, 0x00	; 0
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <getname+0x15c>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <getname+0x166>
     ec0:	00 00       	nop
		}
		set_cursor_location(cursor_location,1);
	}
	_delay_ms(200);

	eeprom_write_block(name, (const void*)1, 4); 
     ec2:	c7 01       	movw	r24, r14
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	44 e0       	ldi	r20, 0x04	; 4
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__eewr_block_m128>
}
     ed0:	2c 96       	adiw	r28, 0x0c	; 12
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	df 90       	pop	r13
     eea:	cf 90       	pop	r12
     eec:	08 95       	ret

00000eee <load_char>:
		_delay_ms(5000);
	}
}

void load_char(char *character)
{
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
		
		for(int i=0; i<8; i++)
     ef6:	08 2f       	mov	r16, r24
     ef8:	19 2f       	mov	r17, r25
     efa:	c0 e0       	ldi	r28, 0x00	; 0
     efc:	d0 e0       	ldi	r29, 0x00	; 0
		{
			lcd_write(character[i],1);
     efe:	f8 01       	movw	r30, r16
     f00:	81 91       	ld	r24, Z+
     f02:	8f 01       	movw	r16, r30
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
}

void load_char(char *character)
{
		
		for(int i=0; i<8; i++)
     f0e:	21 96       	adiw	r28, 0x01	; 1
     f10:	c8 30       	cpi	r28, 0x08	; 8
     f12:	d1 05       	cpc	r29, r1
     f14:	a1 f7       	brne	.-24     	; 0xefe <load_char+0x10>
		{
			lcd_write(character[i],1);
		}
		
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <init>:

int init()
{
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	c0 54       	subi	r28, 0x40	; 64
     f3c:	d0 40       	sbci	r29, 0x00	; 0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
		/* Alustetaan lcd-näyttö */
	   	lcd_init();
     f48:	0e 94 a3 09 	call	0x1346	; 0x1346 <lcd_init>
	   	lcd_write_ctrl(LCD_ON); 
     f4c:	8c e0       	ldi	r24, 0x0C	; 12
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	   	lcd_write_ctrl(LCD_CLEAR); /* tyhjentää näytön */
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

		/* Määritellään kustomoidut merkit */
		char char1[8] = {0x00, 0x04, 0x0e, 0x1f, 0x04, 0x04, 0x04, 0x00};
     f64:	de 01       	movw	r26, r28
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	ec eb       	ldi	r30, 0xBC	; 188
     f6a:	f1 e0       	ldi	r31, 0x01	; 1
     f6c:	88 e0       	ldi	r24, 0x08	; 8
     f6e:	01 90       	ld	r0, Z+
     f70:	0d 92       	st	X+, r0
     f72:	81 50       	subi	r24, 0x01	; 1
     f74:	e1 f7       	brne	.-8      	; 0xf6e <init+0x4e>
		char char2[8] = {0x00, 0x04, 0x04, 0x04, 0x1f, 0x0e, 0x04, 0x00};
     f76:	de 01       	movw	r26, r28
     f78:	19 96       	adiw	r26, 0x09	; 9
     f7a:	e4 eb       	ldi	r30, 0xB4	; 180
     f7c:	f1 e0       	ldi	r31, 0x01	; 1
     f7e:	88 e0       	ldi	r24, 0x08	; 8
     f80:	01 90       	ld	r0, Z+
     f82:	0d 92       	st	X+, r0
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	e1 f7       	brne	.-8      	; 0xf80 <init+0x60>
		char char3[8] = {0x00, 0x04, 0x0c, 0x1f, 0x0c, 0x04, 0x00, 0x00};
     f88:	de 01       	movw	r26, r28
     f8a:	51 96       	adiw	r26, 0x11	; 17
     f8c:	ec ea       	ldi	r30, 0xAC	; 172
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	88 e0       	ldi	r24, 0x08	; 8
     f92:	01 90       	ld	r0, Z+
     f94:	0d 92       	st	X+, r0
     f96:	81 50       	subi	r24, 0x01	; 1
     f98:	e1 f7       	brne	.-8      	; 0xf92 <init+0x72>
		char char4[8] = {0x00, 0x04, 0x06, 0x1f, 0x06, 0x04, 0x00, 0x00};
     f9a:	de 01       	movw	r26, r28
     f9c:	59 96       	adiw	r26, 0x19	; 25
     f9e:	e4 ea       	ldi	r30, 0xA4	; 164
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	88 e0       	ldi	r24, 0x08	; 8
     fa4:	01 90       	ld	r0, Z+
     fa6:	0d 92       	st	X+, r0
     fa8:	81 50       	subi	r24, 0x01	; 1
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <init+0x84>
		char char5[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
     fac:	99 24       	eor	r9, r9
     fae:	68 94       	set
     fb0:	93 f8       	bld	r9, 3
     fb2:	0f 2e       	mov	r0, r31
     fb4:	f1 e2       	ldi	r31, 0x21	; 33
     fb6:	ef 2e       	mov	r14, r31
     fb8:	ff 24       	eor	r15, r15
     fba:	f0 2d       	mov	r31, r0
     fbc:	ec 0e       	add	r14, r28
     fbe:	fd 1e       	adc	r15, r29
     fc0:	f7 01       	movw	r30, r14
     fc2:	89 2d       	mov	r24, r9
     fc4:	11 92       	st	Z+, r1
     fc6:	8a 95       	dec	r24
     fc8:	e9 f7       	brne	.-6      	; 0xfc4 <init+0xa4>
		char char6[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
     fca:	0f 2e       	mov	r0, r31
     fcc:	f9 e2       	ldi	r31, 0x29	; 41
     fce:	cf 2e       	mov	r12, r31
     fd0:	dd 24       	eor	r13, r13
     fd2:	f0 2d       	mov	r31, r0
     fd4:	cc 0e       	add	r12, r28
     fd6:	dd 1e       	adc	r13, r29
     fd8:	f6 01       	movw	r30, r12
     fda:	89 2d       	mov	r24, r9
     fdc:	11 92       	st	Z+, r1
     fde:	8a 95       	dec	r24
     fe0:	e9 f7       	brne	.-6      	; 0xfdc <init+0xbc>
		char char7[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
     fe2:	0f 2e       	mov	r0, r31
     fe4:	f1 e3       	ldi	r31, 0x31	; 49
     fe6:	af 2e       	mov	r10, r31
     fe8:	bb 24       	eor	r11, r11
     fea:	f0 2d       	mov	r31, r0
     fec:	ac 0e       	add	r10, r28
     fee:	bd 1e       	adc	r11, r29
     ff0:	f5 01       	movw	r30, r10
     ff2:	89 2d       	mov	r24, r9
     ff4:	11 92       	st	Z+, r1
     ff6:	8a 95       	dec	r24
     ff8:	e9 f7       	brne	.-6      	; 0xff4 <init+0xd4>
		char char8[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
     ffa:	8e 01       	movw	r16, r28
     ffc:	07 5c       	subi	r16, 0xC7	; 199
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	f8 01       	movw	r30, r16
    1002:	89 2d       	mov	r24, r9
    1004:	11 92       	st	Z+, r1
    1006:	8a 95       	dec	r24
    1008:	e9 f7       	brne	.-6      	; 0x1004 <init+0xe4>

		/* Ladataan kustomoidut merkit */
		lcd_write_ctrl(0x40);
    100a:	80 e4       	ldi	r24, 0x40	; 64
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
		load_char(char1);
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		load_char(char2);
    101e:	ce 01       	movw	r24, r28
    1020:	09 96       	adiw	r24, 0x09	; 9
    1022:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		load_char(char3);
    1026:	ce 01       	movw	r24, r28
    1028:	41 96       	adiw	r24, 0x11	; 17
    102a:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		load_char(char4);
    102e:	ce 01       	movw	r24, r28
    1030:	49 96       	adiw	r24, 0x19	; 25
    1032:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		load_char(char5);
    1036:	c7 01       	movw	r24, r14
    1038:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		load_char(char6);
    103c:	c6 01       	movw	r24, r12
    103e:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		load_char(char7);
    1042:	c5 01       	movw	r24, r10
    1044:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		load_char(char8);
    1048:	c8 01       	movw	r24, r16
    104a:	0e 94 77 07 	call	0xeee	; 0xeee <load_char>
		lcd_write_ctrl(0x80);
    104e:	80 e8       	ldi	r24, 0x80	; 128
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>

		/* Estetään keskeytykset */
		SREG &= ~(1 <<7);
    105a:	8f b7       	in	r24, 0x3f	; 63
    105c:	8f 77       	andi	r24, 0x7F	; 127
    105e:	8f bf       	out	0x3f, r24	; 63

		/* Initialixe timer */
		OCR1AH = 0x3d;  /* 15625 steps */
    1060:	8d e3       	ldi	r24, 0x3D	; 61
    1062:	8b bd       	out	0x2b, r24	; 43
		OCR1AL = 0x09;  /* 1 sec */
    1064:	89 e0       	ldi	r24, 0x09	; 9
    1066:	8a bd       	out	0x2a, r24	; 42
		//OCR1AH = 0x3d;  /* 100 kertaa nopeampi sykli */
		//OCR1AL = 0x09; 
		TCCR1A &= ~( (1 << WGM11) | (1 << WGM10) ); // CTC mode
    1068:	8f b5       	in	r24, 0x2f	; 47
    106a:	8c 7f       	andi	r24, 0xFC	; 252
    106c:	8f bd       	out	0x2f, r24	; 47
		TCCR1B  =    (1 << WGM12);
    106e:	9e bc       	out	0x2e, r9	; 46
		TCCR1B &=   ~(1 << WGM13);
    1070:	8e b5       	in	r24, 0x2e	; 46
    1072:	8f 7e       	andi	r24, 0xEF	; 239
    1074:	8e bd       	out	0x2e, r24	; 46



	    /* enable Output Compare A Match Interrupt */
	    TIMSK |= (1 << OCIE1A);
    1076:	87 b7       	in	r24, 0x37	; 55
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	87 bf       	out	0x37, r24	; 55

		return 0;
}
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	c0 5c       	subi	r28, 0xC0	; 192
    1082:	df 4f       	sbci	r29, 0xFF	; 255
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	bf 90       	pop	r11
    10a0:	af 90       	pop	r10
    10a2:	9f 90       	pop	r9
    10a4:	08 95       	ret

000010a6 <main>:



// Pääohjelma
int main(void)
{
    10a6:	2f 92       	push	r2
    10a8:	3f 92       	push	r3
    10aa:	4f 92       	push	r4
    10ac:	5f 92       	push	r5
    10ae:	6f 92       	push	r6
    10b0:	7f 92       	push	r7
    10b2:	8f 92       	push	r8
    10b4:	9f 92       	push	r9
    10b6:	af 92       	push	r10
    10b8:	bf 92       	push	r11
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	2c 97       	sbiw	r28, 0x0c	; 12
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
		cli();
	
		DDRE |= (1 << PE4) | (1 << PE5);
		PORTE |= (1 << PE5);
		PORTE &= ~(1 << PE4);
		TCCR3A &= ~( (1 << WGM31) | (1 << WGM30) );
    10da:	0f 2e       	mov	r0, r31
    10dc:	fb e8       	ldi	r31, 0x8B	; 139
    10de:	8f 2e       	mov	r8, r31
    10e0:	99 24       	eor	r9, r9
    10e2:	f0 2d       	mov	r31, r0
  		TCCR3B |=    (1 << WGM32);
    10e4:	0f 2e       	mov	r0, r31
    10e6:	fa e8       	ldi	r31, 0x8A	; 138
    10e8:	ef 2e       	mov	r14, r31
    10ea:	ff 24       	eor	r15, r15
    10ec:	f0 2d       	mov	r31, r0
  		TCCR3B &=   ~(1 << WGM33);
   		/* enable Output Compare A Match Interrupt */
  		ETIMSK |= (1 << OCIE3A);
    10ee:	0f 2e       	mov	r0, r31
    10f0:	fd e7       	ldi	r31, 0x7D	; 125
    10f2:	4f 2e       	mov	r4, r31
    10f4:	55 24       	eor	r5, r5
    10f6:	f0 2d       	mov	r31, r0
   		/* start the counter (16 000 000 / 1024) Hz */
  		TCCR3B |= (1 << CS32) | (1 << CS30);

		// Load data from eeprom
  		uint8_t name[4]; 
    	eeprom_read_block((void*)&name, (const void*)1, 4);
    10f8:	5e 01       	movw	r10, r28
    10fa:	08 94       	sec
    10fc:	a1 1c       	adc	r10, r1
    10fe:	b1 1c       	adc	r11, r1
		uint8_t scores_text[4]; 
    	eeprom_read_block((void*)&scores_text, (const void*)10, 4);
    1100:	0f 2e       	mov	r0, r31
    1102:	f5 e0       	ldi	r31, 0x05	; 5
    1104:	cf 2e       	mov	r12, r31
    1106:	dd 24       	eor	r13, r13
    1108:	f0 2d       	mov	r31, r0
    110a:	cc 0e       	add	r12, r28
    110c:	dd 1e       	adc	r13, r29



// Pääohjelma
int main(void)
{
    110e:	6d b6       	in	r6, 0x3d	; 61
    1110:	7e b6       	in	r7, 0x3e	; 62
    1112:	3d b6       	in	r3, 0x3d	; 61
    1114:	27 2c       	mov	r2, r7
	while(1)
	{
		// Alustetaan piirilevy
		init();
    1116:	0e 94 90 07 	call	0xf20	; 0xf20 <init>

		cli();
    111a:	f8 94       	cli
	
		DDRE |= (1 << PE4) | (1 << PE5);
    111c:	82 b1       	in	r24, 0x02	; 2
    111e:	80 63       	ori	r24, 0x30	; 48
    1120:	82 b9       	out	0x02, r24	; 2
		PORTE |= (1 << PE5);
    1122:	1d 9a       	sbi	0x03, 5	; 3
		PORTE &= ~(1 << PE4);
    1124:	1c 98       	cbi	0x03, 4	; 3
		TCCR3A &= ~( (1 << WGM31) | (1 << WGM30) );
    1126:	d4 01       	movw	r26, r8
    1128:	8c 91       	ld	r24, X
    112a:	8c 7f       	andi	r24, 0xFC	; 252
    112c:	8c 93       	st	X, r24
  		TCCR3B |=    (1 << WGM32);
    112e:	f7 01       	movw	r30, r14
    1130:	80 81       	ld	r24, Z
    1132:	88 60       	ori	r24, 0x08	; 8
    1134:	80 83       	st	Z, r24
  		TCCR3B &=   ~(1 << WGM33);
    1136:	80 81       	ld	r24, Z
    1138:	8f 7e       	andi	r24, 0xEF	; 239
    113a:	80 83       	st	Z, r24
   		/* enable Output Compare A Match Interrupt */
  		ETIMSK |= (1 << OCIE3A);
    113c:	d2 01       	movw	r26, r4
    113e:	8c 91       	ld	r24, X
    1140:	80 61       	ori	r24, 0x10	; 16
    1142:	8c 93       	st	X, r24
    	/* set OCR1A register value to 0x003e (corresponds to ~250hz) */
   		OCR3AH = 0x00;
    1144:	e7 e8       	ldi	r30, 0x87	; 135
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	10 82       	st	Z, r1
   		OCR3AL = 0x3e;
    114a:	ee e3       	ldi	r30, 0x3E	; 62
    114c:	a6 e8       	ldi	r26, 0x86	; 134
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ec 93       	st	X, r30
		sei();
    1152:	78 94       	sei
   		/* start the counter (16 000 000 / 1024) Hz */
  		TCCR3B |= (1 << CS32) | (1 << CS30);
    1154:	d7 01       	movw	r26, r14
    1156:	8c 91       	ld	r24, X
    1158:	85 60       	ori	r24, 0x05	; 5
    115a:	8c 93       	st	X, r24

		// Load data from eeprom
  		uint8_t name[4]; 
    	eeprom_read_block((void*)&name, (const void*)1, 4);
    115c:	c5 01       	movw	r24, r10
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	44 e0       	ldi	r20, 0x04	; 4
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__eerd_block_m128>
		uint8_t scores_text[4]; 
    	eeprom_read_block((void*)&scores_text, (const void*)10, 4);
    116a:	c6 01       	movw	r24, r12
    116c:	6a e0       	ldi	r22, 0x0A	; 10
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	44 e0       	ldi	r20, 0x04	; 4
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__eerd_block_m128>

		// Käynnistetään valikko
		menu(name,scores_text);
    1178:	c5 01       	movw	r24, r10
    117a:	b6 01       	movw	r22, r12
    117c:	0e 94 1c 06 	call	0xc38	; 0xc38 <menu>



		// Kysytään nimi
		uint8_t newname[4] = "AAA";
    1180:	80 91 a0 01 	lds	r24, 0x01A0
    1184:	90 91 a1 01 	lds	r25, 0x01A1
    1188:	a0 91 a2 01 	lds	r26, 0x01A2
    118c:	b0 91 a3 01 	lds	r27, 0x01A3
    1190:	89 87       	std	Y+9, r24	; 0x09
    1192:	9a 87       	std	Y+10, r25	; 0x0a
    1194:	ab 87       	std	Y+11, r26	; 0x0b
    1196:	bc 87       	std	Y+12, r27	; 0x0c
		getname(newname);
    1198:	ce 01       	movw	r24, r28
    119a:	09 96       	adiw	r24, 0x09	; 9
    119c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <getname>

		// Määritellään ratkaistavan koodin pituus
		int code_size=4;

		// Alustetaan muuttuja ratkaistavalle koodille
		char code[code_size+1];
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <__stack+0xa3>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <__stack+0xa5>
    11a4:	0f 92       	push	r0
    11a6:	6d b6       	in	r6, 0x3d	; 61
    11a8:	7e b6       	in	r7, 0x3e	; 62
    11aa:	08 94       	sec
    11ac:	61 1c       	adc	r6, r1
    11ae:	71 1c       	adc	r7, r1

		// Alustetaan historia array, joka sisältää ratkaisuyritykset sekä oikeiden ja väärien merkkien määrän
		char history[100*(code_size+2)+1];
    11b0:	ed b7       	in	r30, 0x3d	; 61
    11b2:	fe b7       	in	r31, 0x3e	; 62
    11b4:	e9 55       	subi	r30, 0x59	; 89
    11b6:	f2 40       	sbci	r31, 0x02	; 2
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	fe bf       	out	0x3e, r31	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	ed bf       	out	0x3d, r30	; 61
    11c2:	0d b7       	in	r16, 0x3d	; 61
    11c4:	1e b7       	in	r17, 0x3e	; 62
    11c6:	0f 5f       	subi	r16, 0xFF	; 255
    11c8:	1f 4f       	sbci	r17, 0xFF	; 255

		// Generoidaan ratkaistava koodi pituudeltaan 4 merkkiä
		generatecode(code,code_size);
    11ca:	86 2d       	mov	r24, r6
    11cc:	97 2d       	mov	r25, r7
    11ce:	64 e0       	ldi	r22, 0x04	; 4
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	0e 94 6d 00 	call	0xda	; 0xda <generatecode>


		// Aloitetaan arvailu
		insert_guess(code, code_size, history, scores_text);
    11d6:	86 2d       	mov	r24, r6
    11d8:	97 2d       	mov	r25, r7
    11da:	64 e0       	ldi	r22, 0x04	; 4
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	a8 01       	movw	r20, r16
    11e0:	96 01       	movw	r18, r12
    11e2:	0e 94 27 03 	call	0x64e	; 0x64e <insert_guess>

		/* Start timer */
		TCCR1B |= (1 << CS12) | (1 << CS10);
    11e6:	8e b5       	in	r24, 0x2e	; 46
    11e8:	85 60       	ori	r24, 0x05	; 5
    11ea:	8e bd       	out	0x2e, r24	; 46
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	93 e2       	ldi	r25, 0x23	; 35
    11f0:	a4 ef       	ldi	r26, 0xF4	; 244
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	90 40       	sbci	r25, 0x00	; 0
    11f6:	a0 40       	sbci	r26, 0x00	; 0
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <__stack+0xf3>
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <__stack+0xfd>
    11fc:	00 00       	nop
    11fe:	83 2d       	mov	r24, r3
    1200:	92 2d       	mov	r25, r2
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	9e bf       	out	0x3e, r25	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	8d bf       	out	0x3d, r24	; 61
    120c:	80 cf       	rjmp	.-256    	; 0x110e <__stack+0xf>

0000120e <__vector_12>:

		return 0;
}

ISR(TIMER1_COMPA_vect)
{
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	0b b6       	in	r0, 0x3b	; 59
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
	timer();
    1234:	0e 94 67 00 	call	0xce	; 0xce <timer>
}
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	bf 91       	pop	r27
    123e:	af 91       	pop	r26
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	7f 91       	pop	r23
    1246:	6f 91       	pop	r22
    1248:	5f 91       	pop	r21
    124a:	4f 91       	pop	r20
    124c:	3f 91       	pop	r19
    124e:	2f 91       	pop	r18
    1250:	0f 90       	pop	r0
    1252:	0b be       	out	0x3b, r0	; 59
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
	PORTE ^= (1 << PE4) | (1 << PE5);
    126c:	93 b1       	in	r25, 0x03	; 3
    126e:	80 e3       	ldi	r24, 0x30	; 48
    1270:	89 27       	eor	r24, r25
    1272:	83 b9       	out	0x03, r24	; 3
}
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <pulse>:
static int
pulse(void)
{
  int v;

  PORTC |= 4;                /* EN = 1 */
    1282:	aa 9a       	sbi	0x15, 2	; 21
    1284:	8f e8       	ldi	r24, 0x8F	; 143
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <pulse+0x6>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <pulse+0xc>
    128e:	00 00       	nop
  _delay_ms(0.1);            /* short delay */
  v = PINC>>4;               /* read data bus */
    1290:	83 b3       	in	r24, 0x13	; 19
  PORTC &= ~4;               /* EN = 0 */
    1292:	aa 98       	cbi	0x15, 2	; 21

  return v;
}
    1294:	82 95       	swap	r24
    1296:	8f 70       	andi	r24, 0x0F	; 15
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	08 95       	ret

0000129c <read_nibble>:
}

static int
read_nibble(int rs)
{
  DDRC = 0x0F;               /* set data pins to input */
    129c:	9f e0       	ldi	r25, 0x0F	; 15
    129e:	94 bb       	out	0x14, r25	; 20
  PORTC = rs|2;              /* set register */
    12a0:	82 60       	ori	r24, 0x02	; 2
    12a2:	85 bb       	out	0x15, r24	; 21
  return pulse();            /* read pulse */
    12a4:	0e 94 41 09 	call	0x1282	; 0x1282 <pulse>
}
    12a8:	08 95       	ret

000012aa <read_byte>:
}

/* read a byte without waiting for the busy flag. */
static int
read_byte(int rs)
{
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	8c 01       	movw	r16, r24
  int v;
  
  v = read_nibble(rs)<<4;
    12b8:	0e 94 4e 09 	call	0x129c	; 0x129c <read_nibble>
    12bc:	ec 01       	movw	r28, r24
    12be:	c2 95       	swap	r28
    12c0:	d2 95       	swap	r29
    12c2:	d0 7f       	andi	r29, 0xF0	; 240
    12c4:	dc 27       	eor	r29, r28
    12c6:	c0 7f       	andi	r28, 0xF0	; 240
    12c8:	dc 27       	eor	r29, r28
  v|= read_nibble(rs);
    12ca:	c8 01       	movw	r24, r16
    12cc:	0e 94 4e 09 	call	0x129c	; 0x129c <read_nibble>
    12d0:	c8 2b       	or	r28, r24
    12d2:	d9 2b       	or	r29, r25

  return v;
}
    12d4:	7e 01       	movw	r14, r28
    12d6:	8c 2f       	mov	r24, r28
    12d8:	9f 2d       	mov	r25, r15
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	08 95       	ret

000012e8 <wait>:

/* wait until the busy flag is clear. */
void
wait(void)
{
  while (read_byte(0)&0x80)
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 55 09 	call	0x12aa	; 0x12aa <read_byte>
    12f0:	87 fd       	sbrc	r24, 7
    12f2:	fa cf       	rjmp	.-12     	; 0x12e8 <wait>
    ;
    12f4:	08 95       	ret

000012f6 <write_nibble>:
}

static void
write_nibble(int v, int rs)
{
  DDRC = 0xFF;               /* set data pins to output */
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	24 bb       	out	0x14, r18	; 20
  PORTC = rs|((v&0xF)<<4);   /* set register and data */
    12fa:	82 95       	swap	r24
    12fc:	92 95       	swap	r25
    12fe:	90 7f       	andi	r25, 0xF0	; 240
    1300:	98 27       	eor	r25, r24
    1302:	80 7f       	andi	r24, 0xF0	; 240
    1304:	98 27       	eor	r25, r24
    1306:	86 2b       	or	r24, r22
    1308:	85 bb       	out	0x15, r24	; 21
  pulse();                   /* write pulse */
    130a:	0e 94 41 09 	call	0x1282	; 0x1282 <pulse>
}
    130e:	08 95       	ret

00001310 <lcd_write>:
}

/* write a byte into register rs (0 = control, 1 = data). */
void
lcd_write(int v, int rs)
{
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	ec 01       	movw	r28, r24
    131a:	8b 01       	movw	r16, r22
  write_nibble(v>>4,rs);     /* first the high nibble */
    131c:	95 95       	asr	r25
    131e:	87 95       	ror	r24
    1320:	95 95       	asr	r25
    1322:	87 95       	ror	r24
    1324:	95 95       	asr	r25
    1326:	87 95       	ror	r24
    1328:	95 95       	asr	r25
    132a:	87 95       	ror	r24
    132c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <write_nibble>
  write_nibble(v,rs);        /* and then the low */
    1330:	ce 01       	movw	r24, r28
    1332:	b8 01       	movw	r22, r16
    1334:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <write_nibble>
  wait();
    1338:	0e 94 74 09 	call	0x12e8	; 0x12e8 <wait>
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <lcd_init>:
/* initialize lcd (see HD44780 datasheet) */
void
lcd_init(void)
{
	/* set interface to be 4 bits long */
  write_nibble(3,0); _delay_ms(5);
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <write_nibble>
    1352:	8f e1       	ldi	r24, 0x1F	; 31
    1354:	9e e4       	ldi	r25, 0x4E	; 78
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <lcd_init+0x10>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <lcd_init+0x16>
    135c:	00 00       	nop
  write_nibble(3,0); _delay_ms(5);
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <write_nibble>
    136a:	8f e1       	ldi	r24, 0x1F	; 31
    136c:	9e e4       	ldi	r25, 0x4E	; 78
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <lcd_init+0x28>
    1372:	00 c0       	rjmp	.+0      	; 0x1374 <lcd_init+0x2e>
    1374:	00 00       	nop
  write_nibble(3,0); _delay_ms(5);
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <write_nibble>
    1382:	8f e1       	ldi	r24, 0x1F	; 31
    1384:	9e e4       	ldi	r25, 0x4E	; 78
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <lcd_init+0x40>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <lcd_init+0x46>
    138c:	00 00       	nop
  write_nibble(2,0); _delay_ms(5);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <write_nibble>
    139a:	8f e1       	ldi	r24, 0x1F	; 31
    139c:	9e e4       	ldi	r25, 0x4E	; 78
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <lcd_init+0x58>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <lcd_init+0x5e>
    13a4:	00 00       	nop

	/* function set: set number of lines (bit 3) and font (bit 2) */
  lcd_write_ctrl(LCD_FUNCTION|0x0C);
    13a6:	8c e2       	ldi	r24, 0x2C	; 44
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
  lcd_write_ctrl(LCD_OFF);
    13b2:	88 e0       	ldi	r24, 0x08	; 8
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
  lcd_write_ctrl(LCD_CLEAR);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
	/* entry mode set: increment DDRAM pointer when a character is written */
  lcd_write_ctrl(LCD_MODE|0x02);
    13ca:	86 e0       	ldi	r24, 0x06	; 6
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	0e 94 88 09 	call	0x1310	; 0x1310 <lcd_write>
}
    13d6:	08 95       	ret

000013d8 <lcd_read>:
}

/* read a byte from lcd register rs. */
int
lcd_read(int rs)
{
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
  int v;
  
  v = read_byte(rs);
    13dc:	0e 94 55 09 	call	0x12aa	; 0x12aa <read_byte>
    13e0:	08 2f       	mov	r16, r24
    13e2:	19 2f       	mov	r17, r25
  wait();
    13e4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <wait>

  return v;
}
    13e8:	80 2f       	mov	r24, r16
    13ea:	91 2f       	mov	r25, r17
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	08 95       	ret

000013f2 <__udivmodqi4>:
    13f2:	99 1b       	sub	r25, r25
    13f4:	79 e0       	ldi	r23, 0x09	; 9
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__udivmodqi4_ep>

000013f8 <__udivmodqi4_loop>:
    13f8:	99 1f       	adc	r25, r25
    13fa:	96 17       	cp	r25, r22
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <__udivmodqi4_ep>
    13fe:	96 1b       	sub	r25, r22

00001400 <__udivmodqi4_ep>:
    1400:	88 1f       	adc	r24, r24
    1402:	7a 95       	dec	r23
    1404:	c9 f7       	brne	.-14     	; 0x13f8 <__udivmodqi4_loop>
    1406:	80 95       	com	r24
    1408:	08 95       	ret

0000140a <__divmodhi4>:
    140a:	97 fb       	bst	r25, 7
    140c:	09 2e       	mov	r0, r25
    140e:	07 26       	eor	r0, r23
    1410:	0a d0       	rcall	.+20     	; 0x1426 <__divmodhi4_neg1>
    1412:	77 fd       	sbrc	r23, 7
    1414:	04 d0       	rcall	.+8      	; 0x141e <__divmodhi4_neg2>
    1416:	0c d0       	rcall	.+24     	; 0x1430 <__udivmodhi4>
    1418:	06 d0       	rcall	.+12     	; 0x1426 <__divmodhi4_neg1>
    141a:	00 20       	and	r0, r0
    141c:	1a f4       	brpl	.+6      	; 0x1424 <__divmodhi4_exit>

0000141e <__divmodhi4_neg2>:
    141e:	70 95       	com	r23
    1420:	61 95       	neg	r22
    1422:	7f 4f       	sbci	r23, 0xFF	; 255

00001424 <__divmodhi4_exit>:
    1424:	08 95       	ret

00001426 <__divmodhi4_neg1>:
    1426:	f6 f7       	brtc	.-4      	; 0x1424 <__divmodhi4_exit>
    1428:	90 95       	com	r25
    142a:	81 95       	neg	r24
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	08 95       	ret

00001430 <__udivmodhi4>:
    1430:	aa 1b       	sub	r26, r26
    1432:	bb 1b       	sub	r27, r27
    1434:	51 e1       	ldi	r21, 0x11	; 17
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <__udivmodhi4_ep>

00001438 <__udivmodhi4_loop>:
    1438:	aa 1f       	adc	r26, r26
    143a:	bb 1f       	adc	r27, r27
    143c:	a6 17       	cp	r26, r22
    143e:	b7 07       	cpc	r27, r23
    1440:	10 f0       	brcs	.+4      	; 0x1446 <__udivmodhi4_ep>
    1442:	a6 1b       	sub	r26, r22
    1444:	b7 0b       	sbc	r27, r23

00001446 <__udivmodhi4_ep>:
    1446:	88 1f       	adc	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	5a 95       	dec	r21
    144c:	a9 f7       	brne	.-22     	; 0x1438 <__udivmodhi4_loop>
    144e:	80 95       	com	r24
    1450:	90 95       	com	r25
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	08 95       	ret

00001458 <do_rand>:
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	68 81       	ld	r22, Y
    1470:	79 81       	ldd	r23, Y+1	; 0x01
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	9b 81       	ldd	r25, Y+3	; 0x03
    1476:	61 15       	cp	r22, r1
    1478:	71 05       	cpc	r23, r1
    147a:	81 05       	cpc	r24, r1
    147c:	91 05       	cpc	r25, r1
    147e:	21 f4       	brne	.+8      	; 0x1488 <do_rand+0x30>
    1480:	64 e2       	ldi	r22, 0x24	; 36
    1482:	79 ed       	ldi	r23, 0xD9	; 217
    1484:	8b e5       	ldi	r24, 0x5B	; 91
    1486:	97 e0       	ldi	r25, 0x07	; 7
    1488:	2d e1       	ldi	r18, 0x1D	; 29
    148a:	33 ef       	ldi	r19, 0xF3	; 243
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__divmodsi4>
    1494:	79 01       	movw	r14, r18
    1496:	8a 01       	movw	r16, r20
    1498:	27 ea       	ldi	r18, 0xA7	; 167
    149a:	31 e4       	ldi	r19, 0x41	; 65
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsi3>
    14a4:	5b 01       	movw	r10, r22
    14a6:	6c 01       	movw	r12, r24
    14a8:	c8 01       	movw	r24, r16
    14aa:	b7 01       	movw	r22, r14
    14ac:	2c ee       	ldi	r18, 0xEC	; 236
    14ae:	34 ef       	ldi	r19, 0xF4	; 244
    14b0:	4f ef       	ldi	r20, 0xFF	; 255
    14b2:	5f ef       	ldi	r21, 0xFF	; 255
    14b4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsi3>
    14b8:	6a 0d       	add	r22, r10
    14ba:	7b 1d       	adc	r23, r11
    14bc:	8c 1d       	adc	r24, r12
    14be:	9d 1d       	adc	r25, r13
    14c0:	97 ff       	sbrs	r25, 7
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <do_rand+0x74>
    14c4:	61 50       	subi	r22, 0x01	; 1
    14c6:	70 40       	sbci	r23, 0x00	; 0
    14c8:	80 40       	sbci	r24, 0x00	; 0
    14ca:	90 48       	sbci	r25, 0x80	; 128
    14cc:	68 83       	st	Y, r22
    14ce:	79 83       	std	Y+1, r23	; 0x01
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	9b 83       	std	Y+3, r25	; 0x03
    14d4:	7f 77       	andi	r23, 0x7F	; 127
    14d6:	cb 01       	movw	r24, r22
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	bf 90       	pop	r11
    14ea:	af 90       	pop	r10
    14ec:	08 95       	ret

000014ee <rand_r>:
    14ee:	0e 94 2c 0a 	call	0x1458	; 0x1458 <do_rand>
    14f2:	08 95       	ret

000014f4 <rand>:
    14f4:	84 ec       	ldi	r24, 0xC4	; 196
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <do_rand>
    14fc:	08 95       	ret

000014fe <srand>:
    14fe:	a0 e0       	ldi	r26, 0x00	; 0
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	80 93 c4 01 	sts	0x01C4, r24
    1506:	90 93 c5 01 	sts	0x01C5, r25
    150a:	a0 93 c6 01 	sts	0x01C6, r26
    150e:	b0 93 c7 01 	sts	0x01C7, r27
    1512:	08 95       	ret

00001514 <atoi>:
    1514:	fc 01       	movw	r30, r24
    1516:	88 27       	eor	r24, r24
    1518:	99 27       	eor	r25, r25
    151a:	e8 94       	clt
    151c:	21 91       	ld	r18, Z+
    151e:	20 32       	cpi	r18, 0x20	; 32
    1520:	e9 f3       	breq	.-6      	; 0x151c <atoi+0x8>
    1522:	29 30       	cpi	r18, 0x09	; 9
    1524:	10 f0       	brcs	.+4      	; 0x152a <atoi+0x16>
    1526:	2e 30       	cpi	r18, 0x0E	; 14
    1528:	c8 f3       	brcs	.-14     	; 0x151c <atoi+0x8>
    152a:	2b 32       	cpi	r18, 0x2B	; 43
    152c:	41 f0       	breq	.+16     	; 0x153e <atoi+0x2a>
    152e:	2d 32       	cpi	r18, 0x2D	; 45
    1530:	39 f4       	brne	.+14     	; 0x1540 <atoi+0x2c>
    1532:	68 94       	set
    1534:	04 c0       	rjmp	.+8      	; 0x153e <atoi+0x2a>
    1536:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__mulhi_const_10>
    153a:	82 0f       	add	r24, r18
    153c:	91 1d       	adc	r25, r1
    153e:	21 91       	ld	r18, Z+
    1540:	20 53       	subi	r18, 0x30	; 48
    1542:	2a 30       	cpi	r18, 0x0A	; 10
    1544:	c0 f3       	brcs	.-16     	; 0x1536 <atoi+0x22>
    1546:	1e f4       	brtc	.+6      	; 0x154e <atoi+0x3a>
    1548:	90 95       	com	r25
    154a:	81 95       	neg	r24
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	08 95       	ret

00001550 <__mulhi_const_10>:
    1550:	7a e0       	ldi	r23, 0x0A	; 10
    1552:	97 9f       	mul	r25, r23
    1554:	90 2d       	mov	r25, r0
    1556:	87 9f       	mul	r24, r23
    1558:	80 2d       	mov	r24, r0
    155a:	91 0d       	add	r25, r1
    155c:	11 24       	eor	r1, r1
    155e:	08 95       	ret

00001560 <__eerd_block_m128>:
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22

00001564 <__eerd_blraw_m128>:
    1564:	fc 01       	movw	r30, r24
    1566:	e1 99       	sbic	0x1c, 1	; 28
    1568:	fe cf       	rjmp	.-4      	; 0x1566 <__eerd_blraw_m128+0x2>
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <__eerd_blraw_m128+0x14>
    156c:	ff bb       	out	0x1f, r31	; 31
    156e:	ee bb       	out	0x1e, r30	; 30
    1570:	e0 9a       	sbi	0x1c, 0	; 28
    1572:	31 96       	adiw	r30, 0x01	; 1
    1574:	0d b2       	in	r0, 0x1d	; 29
    1576:	0d 92       	st	X+, r0
    1578:	41 50       	subi	r20, 0x01	; 1
    157a:	50 40       	sbci	r21, 0x00	; 0
    157c:	b8 f7       	brcc	.-18     	; 0x156c <__eerd_blraw_m128+0x8>
    157e:	08 95       	ret

00001580 <__eewr_block_m128>:
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	03 c0       	rjmp	.+6      	; 0x158c <__eewr_block_m128+0xc>
    1586:	2d 91       	ld	r18, X+
    1588:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__eewr_r18_m128>
    158c:	41 50       	subi	r20, 0x01	; 1
    158e:	50 40       	sbci	r21, 0x00	; 0
    1590:	d0 f7       	brcc	.-12     	; 0x1586 <__eewr_block_m128+0x6>
    1592:	08 95       	ret

00001594 <__eewr_byte_m128>:
    1594:	26 2f       	mov	r18, r22

00001596 <__eewr_r18_m128>:
    1596:	e1 99       	sbic	0x1c, 1	; 28
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <__eewr_r18_m128>
    159a:	9f bb       	out	0x1f, r25	; 31
    159c:	8e bb       	out	0x1e, r24	; 30
    159e:	2d bb       	out	0x1d, r18	; 29
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	e2 9a       	sbi	0x1c, 2	; 28
    15a6:	e1 9a       	sbi	0x1c, 1	; 28
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	08 95       	ret

000015ae <__mulsi3>:
    15ae:	62 9f       	mul	r22, r18
    15b0:	d0 01       	movw	r26, r0
    15b2:	73 9f       	mul	r23, r19
    15b4:	f0 01       	movw	r30, r0
    15b6:	82 9f       	mul	r24, r18
    15b8:	e0 0d       	add	r30, r0
    15ba:	f1 1d       	adc	r31, r1
    15bc:	64 9f       	mul	r22, r20
    15be:	e0 0d       	add	r30, r0
    15c0:	f1 1d       	adc	r31, r1
    15c2:	92 9f       	mul	r25, r18
    15c4:	f0 0d       	add	r31, r0
    15c6:	83 9f       	mul	r24, r19
    15c8:	f0 0d       	add	r31, r0
    15ca:	74 9f       	mul	r23, r20
    15cc:	f0 0d       	add	r31, r0
    15ce:	65 9f       	mul	r22, r21
    15d0:	f0 0d       	add	r31, r0
    15d2:	99 27       	eor	r25, r25
    15d4:	72 9f       	mul	r23, r18
    15d6:	b0 0d       	add	r27, r0
    15d8:	e1 1d       	adc	r30, r1
    15da:	f9 1f       	adc	r31, r25
    15dc:	63 9f       	mul	r22, r19
    15de:	b0 0d       	add	r27, r0
    15e0:	e1 1d       	adc	r30, r1
    15e2:	f9 1f       	adc	r31, r25
    15e4:	bd 01       	movw	r22, r26
    15e6:	cf 01       	movw	r24, r30
    15e8:	11 24       	eor	r1, r1
    15ea:	08 95       	ret

000015ec <__divmodsi4>:
    15ec:	97 fb       	bst	r25, 7
    15ee:	09 2e       	mov	r0, r25
    15f0:	05 26       	eor	r0, r21
    15f2:	0e d0       	rcall	.+28     	; 0x1610 <__divmodsi4_neg1>
    15f4:	57 fd       	sbrc	r21, 7
    15f6:	04 d0       	rcall	.+8      	; 0x1600 <__divmodsi4_neg2>
    15f8:	14 d0       	rcall	.+40     	; 0x1622 <__udivmodsi4>
    15fa:	0a d0       	rcall	.+20     	; 0x1610 <__divmodsi4_neg1>
    15fc:	00 1c       	adc	r0, r0
    15fe:	38 f4       	brcc	.+14     	; 0x160e <__divmodsi4_exit>

00001600 <__divmodsi4_neg2>:
    1600:	50 95       	com	r21
    1602:	40 95       	com	r20
    1604:	30 95       	com	r19
    1606:	21 95       	neg	r18
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	4f 4f       	sbci	r20, 0xFF	; 255
    160c:	5f 4f       	sbci	r21, 0xFF	; 255

0000160e <__divmodsi4_exit>:
    160e:	08 95       	ret

00001610 <__divmodsi4_neg1>:
    1610:	f6 f7       	brtc	.-4      	; 0x160e <__divmodsi4_exit>
    1612:	90 95       	com	r25
    1614:	80 95       	com	r24
    1616:	70 95       	com	r23
    1618:	61 95       	neg	r22
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	08 95       	ret

00001622 <__udivmodsi4>:
    1622:	a1 e2       	ldi	r26, 0x21	; 33
    1624:	1a 2e       	mov	r1, r26
    1626:	aa 1b       	sub	r26, r26
    1628:	bb 1b       	sub	r27, r27
    162a:	fd 01       	movw	r30, r26
    162c:	0d c0       	rjmp	.+26     	; 0x1648 <__udivmodsi4_ep>

0000162e <__udivmodsi4_loop>:
    162e:	aa 1f       	adc	r26, r26
    1630:	bb 1f       	adc	r27, r27
    1632:	ee 1f       	adc	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	a2 17       	cp	r26, r18
    1638:	b3 07       	cpc	r27, r19
    163a:	e4 07       	cpc	r30, r20
    163c:	f5 07       	cpc	r31, r21
    163e:	20 f0       	brcs	.+8      	; 0x1648 <__udivmodsi4_ep>
    1640:	a2 1b       	sub	r26, r18
    1642:	b3 0b       	sbc	r27, r19
    1644:	e4 0b       	sbc	r30, r20
    1646:	f5 0b       	sbc	r31, r21

00001648 <__udivmodsi4_ep>:
    1648:	66 1f       	adc	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	1a 94       	dec	r1
    1652:	69 f7       	brne	.-38     	; 0x162e <__udivmodsi4_loop>
    1654:	60 95       	com	r22
    1656:	70 95       	com	r23
    1658:	80 95       	com	r24
    165a:	90 95       	com	r25
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	bd 01       	movw	r22, r26
    1662:	cf 01       	movw	r24, r30
    1664:	08 95       	ret

00001666 <_exit>:
    1666:	f8 94       	cli

00001668 <__stop_program>:
    1668:	ff cf       	rjmp	.-2      	; 0x1668 <__stop_program>
